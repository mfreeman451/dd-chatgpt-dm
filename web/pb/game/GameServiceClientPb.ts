/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.4
// source: game.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as game_pb from './game_pb';


export class GameClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreatePlayer = new grpcWeb.MethodDescriptor(
    '/Game/CreatePlayer',
    grpcWeb.MethodType.UNARY,
    game_pb.CreatePlayerRequest,
    game_pb.CreatePlayerResponse,
    (request: game_pb.CreatePlayerRequest) => {
      return request.serializeBinary();
    },
    game_pb.CreatePlayerResponse.deserializeBinary
  );

  createPlayer(
    request: game_pb.CreatePlayerRequest,
    metadata: grpcWeb.Metadata | null): Promise<game_pb.CreatePlayerResponse>;

  createPlayer(
    request: game_pb.CreatePlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: game_pb.CreatePlayerResponse) => void): grpcWeb.ClientReadableStream<game_pb.CreatePlayerResponse>;

  createPlayer(
    request: game_pb.CreatePlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: game_pb.CreatePlayerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/CreatePlayer',
        request,
        metadata || {},
        this.methodDescriptorCreatePlayer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/CreatePlayer',
    request,
    metadata || {},
    this.methodDescriptorCreatePlayer);
  }

  methodDescriptorMovePlayer = new grpcWeb.MethodDescriptor(
    '/Game/MovePlayer',
    grpcWeb.MethodType.UNARY,
    game_pb.MovePlayerRequest,
    game_pb.MovePlayerResponse,
    (request: game_pb.MovePlayerRequest) => {
      return request.serializeBinary();
    },
    game_pb.MovePlayerResponse.deserializeBinary
  );

  movePlayer(
    request: game_pb.MovePlayerRequest,
    metadata: grpcWeb.Metadata | null): Promise<game_pb.MovePlayerResponse>;

  movePlayer(
    request: game_pb.MovePlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: game_pb.MovePlayerResponse) => void): grpcWeb.ClientReadableStream<game_pb.MovePlayerResponse>;

  movePlayer(
    request: game_pb.MovePlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: game_pb.MovePlayerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/MovePlayer',
        request,
        metadata || {},
        this.methodDescriptorMovePlayer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/MovePlayer',
    request,
    metadata || {},
    this.methodDescriptorMovePlayer);
  }

  methodDescriptorGetLocation = new grpcWeb.MethodDescriptor(
    '/Game/GetLocation',
    grpcWeb.MethodType.UNARY,
    game_pb.GetLocationRequest,
    game_pb.GetLocationResponse,
    (request: game_pb.GetLocationRequest) => {
      return request.serializeBinary();
    },
    game_pb.GetLocationResponse.deserializeBinary
  );

  getLocation(
    request: game_pb.GetLocationRequest,
    metadata: grpcWeb.Metadata | null): Promise<game_pb.GetLocationResponse>;

  getLocation(
    request: game_pb.GetLocationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: game_pb.GetLocationResponse) => void): grpcWeb.ClientReadableStream<game_pb.GetLocationResponse>;

  getLocation(
    request: game_pb.GetLocationRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: game_pb.GetLocationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/GetLocation',
        request,
        metadata || {},
        this.methodDescriptorGetLocation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/GetLocation',
    request,
    metadata || {},
    this.methodDescriptorGetLocation);
  }

  methodDescriptorListPlayers = new grpcWeb.MethodDescriptor(
    '/Game/ListPlayers',
    grpcWeb.MethodType.UNARY,
    game_pb.ListPlayersRequest,
    game_pb.ListPlayersResponse,
    (request: game_pb.ListPlayersRequest) => {
      return request.serializeBinary();
    },
    game_pb.ListPlayersResponse.deserializeBinary
  );

  listPlayers(
    request: game_pb.ListPlayersRequest,
    metadata: grpcWeb.Metadata | null): Promise<game_pb.ListPlayersResponse>;

  listPlayers(
    request: game_pb.ListPlayersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: game_pb.ListPlayersResponse) => void): grpcWeb.ClientReadableStream<game_pb.ListPlayersResponse>;

  listPlayers(
    request: game_pb.ListPlayersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: game_pb.ListPlayersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/ListPlayers',
        request,
        metadata || {},
        this.methodDescriptorListPlayers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/ListPlayers',
    request,
    metadata || {},
    this.methodDescriptorListPlayers);
  }

  methodDescriptorGetPlayer = new grpcWeb.MethodDescriptor(
    '/Game/GetPlayer',
    grpcWeb.MethodType.UNARY,
    game_pb.GetPlayerRequest,
    game_pb.GetPlayerResponse,
    (request: game_pb.GetPlayerRequest) => {
      return request.serializeBinary();
    },
    game_pb.GetPlayerResponse.deserializeBinary
  );

  getPlayer(
    request: game_pb.GetPlayerRequest,
    metadata: grpcWeb.Metadata | null): Promise<game_pb.GetPlayerResponse>;

  getPlayer(
    request: game_pb.GetPlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: game_pb.GetPlayerResponse) => void): grpcWeb.ClientReadableStream<game_pb.GetPlayerResponse>;

  getPlayer(
    request: game_pb.GetPlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: game_pb.GetPlayerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/GetPlayer',
        request,
        metadata || {},
        this.methodDescriptorGetPlayer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/GetPlayer',
    request,
    metadata || {},
    this.methodDescriptorGetPlayer);
  }

  methodDescriptorSetPlayer = new grpcWeb.MethodDescriptor(
    '/Game/SetPlayer',
    grpcWeb.MethodType.UNARY,
    game_pb.SetPlayerRequest,
    game_pb.SetPlayerResponse,
    (request: game_pb.SetPlayerRequest) => {
      return request.serializeBinary();
    },
    game_pb.SetPlayerResponse.deserializeBinary
  );

  setPlayer(
    request: game_pb.SetPlayerRequest,
    metadata: grpcWeb.Metadata | null): Promise<game_pb.SetPlayerResponse>;

  setPlayer(
    request: game_pb.SetPlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: game_pb.SetPlayerResponse) => void): grpcWeb.ClientReadableStream<game_pb.SetPlayerResponse>;

  setPlayer(
    request: game_pb.SetPlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: game_pb.SetPlayerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/SetPlayer',
        request,
        metadata || {},
        this.methodDescriptorSetPlayer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/SetPlayer',
    request,
    metadata || {},
    this.methodDescriptorSetPlayer);
  }

  methodDescriptorUpdatePlayer = new grpcWeb.MethodDescriptor(
    '/Game/UpdatePlayer',
    grpcWeb.MethodType.UNARY,
    game_pb.UpdatePlayerRequest,
    game_pb.UpdatePlayerResponse,
    (request: game_pb.UpdatePlayerRequest) => {
      return request.serializeBinary();
    },
    game_pb.UpdatePlayerResponse.deserializeBinary
  );

  updatePlayer(
    request: game_pb.UpdatePlayerRequest,
    metadata: grpcWeb.Metadata | null): Promise<game_pb.UpdatePlayerResponse>;

  updatePlayer(
    request: game_pb.UpdatePlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: game_pb.UpdatePlayerResponse) => void): grpcWeb.ClientReadableStream<game_pb.UpdatePlayerResponse>;

  updatePlayer(
    request: game_pb.UpdatePlayerRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: game_pb.UpdatePlayerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Game/UpdatePlayer',
        request,
        metadata || {},
        this.methodDescriptorUpdatePlayer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Game/UpdatePlayer',
    request,
    metadata || {},
    this.methodDescriptorUpdatePlayer);
  }

}

