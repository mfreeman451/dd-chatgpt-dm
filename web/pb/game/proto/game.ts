/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: proto/game.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class Coordinates extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        z?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("z" in data && data.z != undefined) {
                this.z = data.z;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get z() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set z(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        z?: number;
    }): Coordinates {
        const message = new Coordinates({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.z != null) {
            message.z = data.z;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            z?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.z != null) {
            data.z = this.z;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.z != 0)
            writer.writeInt32(3, this.z);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Coordinates {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Coordinates();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.z = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Coordinates {
        return Coordinates.deserialize(bytes);
    }
}
export class Player extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        discord?: string;
        name?: string;
        race?: string;
        class?: string;
        level?: number;
        alignment?: string;
        background?: string;
        strength?: number;
        dexterity?: number;
        constitution?: number;
        intelligence?: number;
        wisdom?: number;
        charisma?: number;
        hitPoints?: number;
        temporaryHitPoints?: number;
        maxHitPoints?: number;
        armorClass?: number;
        proficiencyBonus?: number;
        skills?: Skill[];
        savingThrows?: SavingThrow[];
        languages?: Language[];
        equipment?: Equipment[];
        features?: Feature[];
        spells?: Spell[];
        spellSlots?: number;
        currentSpellSlots?: number;
        experiencePoints?: number;
        initiative?: number;
        speed?: number;
        hitDice?: string;
        deathSaves?: DeathSaves;
        abilityScoreBonuses?: AbilityScoreBonus[];
        specialAbilities?: SpecialAbility[];
        racialTraits?: RacialTraits;
        location?: Coordinates;
        LastLogin?: number;
        LastLogout?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [20, 21, 22, 23, 24, 25, 33, 34], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("discord" in data && data.discord != undefined) {
                this.discord = data.discord;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("race" in data && data.race != undefined) {
                this.race = data.race;
            }
            if ("class" in data && data.class != undefined) {
                this.class = data.class;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("alignment" in data && data.alignment != undefined) {
                this.alignment = data.alignment;
            }
            if ("background" in data && data.background != undefined) {
                this.background = data.background;
            }
            if ("strength" in data && data.strength != undefined) {
                this.strength = data.strength;
            }
            if ("dexterity" in data && data.dexterity != undefined) {
                this.dexterity = data.dexterity;
            }
            if ("constitution" in data && data.constitution != undefined) {
                this.constitution = data.constitution;
            }
            if ("intelligence" in data && data.intelligence != undefined) {
                this.intelligence = data.intelligence;
            }
            if ("wisdom" in data && data.wisdom != undefined) {
                this.wisdom = data.wisdom;
            }
            if ("charisma" in data && data.charisma != undefined) {
                this.charisma = data.charisma;
            }
            if ("hitPoints" in data && data.hitPoints != undefined) {
                this.hitPoints = data.hitPoints;
            }
            if ("temporaryHitPoints" in data && data.temporaryHitPoints != undefined) {
                this.temporaryHitPoints = data.temporaryHitPoints;
            }
            if ("maxHitPoints" in data && data.maxHitPoints != undefined) {
                this.maxHitPoints = data.maxHitPoints;
            }
            if ("armorClass" in data && data.armorClass != undefined) {
                this.armorClass = data.armorClass;
            }
            if ("proficiencyBonus" in data && data.proficiencyBonus != undefined) {
                this.proficiencyBonus = data.proficiencyBonus;
            }
            if ("skills" in data && data.skills != undefined) {
                this.skills = data.skills;
            }
            if ("savingThrows" in data && data.savingThrows != undefined) {
                this.savingThrows = data.savingThrows;
            }
            if ("languages" in data && data.languages != undefined) {
                this.languages = data.languages;
            }
            if ("equipment" in data && data.equipment != undefined) {
                this.equipment = data.equipment;
            }
            if ("features" in data && data.features != undefined) {
                this.features = data.features;
            }
            if ("spells" in data && data.spells != undefined) {
                this.spells = data.spells;
            }
            if ("spellSlots" in data && data.spellSlots != undefined) {
                this.spellSlots = data.spellSlots;
            }
            if ("currentSpellSlots" in data && data.currentSpellSlots != undefined) {
                this.currentSpellSlots = data.currentSpellSlots;
            }
            if ("experiencePoints" in data && data.experiencePoints != undefined) {
                this.experiencePoints = data.experiencePoints;
            }
            if ("initiative" in data && data.initiative != undefined) {
                this.initiative = data.initiative;
            }
            if ("speed" in data && data.speed != undefined) {
                this.speed = data.speed;
            }
            if ("hitDice" in data && data.hitDice != undefined) {
                this.hitDice = data.hitDice;
            }
            if ("deathSaves" in data && data.deathSaves != undefined) {
                this.deathSaves = data.deathSaves;
            }
            if ("abilityScoreBonuses" in data && data.abilityScoreBonuses != undefined) {
                this.abilityScoreBonuses = data.abilityScoreBonuses;
            }
            if ("specialAbilities" in data && data.specialAbilities != undefined) {
                this.specialAbilities = data.specialAbilities;
            }
            if ("racialTraits" in data && data.racialTraits != undefined) {
                this.racialTraits = data.racialTraits;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("LastLogin" in data && data.LastLogin != undefined) {
                this.LastLogin = data.LastLogin;
            }
            if ("LastLogout" in data && data.LastLogout != undefined) {
                this.LastLogout = data.LastLogout;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get discord() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set discord(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get race() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set race(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get class() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set class(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set level(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get alignment() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set alignment(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get background() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set background(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get strength() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set strength(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get dexterity() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set dexterity(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get constitution() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set constitution(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get intelligence() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set intelligence(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get wisdom() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set wisdom(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get charisma() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set charisma(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get hitPoints() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set hitPoints(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get temporaryHitPoints() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set temporaryHitPoints(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get maxHitPoints() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set maxHitPoints(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get armorClass() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set armorClass(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get proficiencyBonus() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set proficiencyBonus(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get skills() {
        return pb_1.Message.getRepeatedWrapperField(this, Skill, 20) as Skill[];
    }
    set skills(value: Skill[]) {
        pb_1.Message.setRepeatedWrapperField(this, 20, value);
    }
    get savingThrows() {
        return pb_1.Message.getRepeatedWrapperField(this, SavingThrow, 21) as SavingThrow[];
    }
    set savingThrows(value: SavingThrow[]) {
        pb_1.Message.setRepeatedWrapperField(this, 21, value);
    }
    get languages() {
        return pb_1.Message.getRepeatedWrapperField(this, Language, 22) as Language[];
    }
    set languages(value: Language[]) {
        pb_1.Message.setRepeatedWrapperField(this, 22, value);
    }
    get equipment() {
        return pb_1.Message.getRepeatedWrapperField(this, Equipment, 23) as Equipment[];
    }
    set equipment(value: Equipment[]) {
        pb_1.Message.setRepeatedWrapperField(this, 23, value);
    }
    get features() {
        return pb_1.Message.getRepeatedWrapperField(this, Feature, 24) as Feature[];
    }
    set features(value: Feature[]) {
        pb_1.Message.setRepeatedWrapperField(this, 24, value);
    }
    get spells() {
        return pb_1.Message.getRepeatedWrapperField(this, Spell, 25) as Spell[];
    }
    set spells(value: Spell[]) {
        pb_1.Message.setRepeatedWrapperField(this, 25, value);
    }
    get spellSlots() {
        return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
    }
    set spellSlots(value: number) {
        pb_1.Message.setField(this, 26, value);
    }
    get currentSpellSlots() {
        return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
    }
    set currentSpellSlots(value: number) {
        pb_1.Message.setField(this, 27, value);
    }
    get experiencePoints() {
        return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
    }
    set experiencePoints(value: number) {
        pb_1.Message.setField(this, 28, value);
    }
    get initiative() {
        return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
    }
    set initiative(value: number) {
        pb_1.Message.setField(this, 29, value);
    }
    get speed() {
        return pb_1.Message.getFieldWithDefault(this, 30, 0) as number;
    }
    set speed(value: number) {
        pb_1.Message.setField(this, 30, value);
    }
    get hitDice() {
        return pb_1.Message.getFieldWithDefault(this, 31, "") as string;
    }
    set hitDice(value: string) {
        pb_1.Message.setField(this, 31, value);
    }
    get deathSaves() {
        return pb_1.Message.getWrapperField(this, DeathSaves, 32) as DeathSaves;
    }
    set deathSaves(value: DeathSaves) {
        pb_1.Message.setWrapperField(this, 32, value);
    }
    get has_deathSaves() {
        return pb_1.Message.getField(this, 32) != null;
    }
    get abilityScoreBonuses() {
        return pb_1.Message.getRepeatedWrapperField(this, AbilityScoreBonus, 33) as AbilityScoreBonus[];
    }
    set abilityScoreBonuses(value: AbilityScoreBonus[]) {
        pb_1.Message.setRepeatedWrapperField(this, 33, value);
    }
    get specialAbilities() {
        return pb_1.Message.getRepeatedWrapperField(this, SpecialAbility, 34) as SpecialAbility[];
    }
    set specialAbilities(value: SpecialAbility[]) {
        pb_1.Message.setRepeatedWrapperField(this, 34, value);
    }
    get racialTraits() {
        return pb_1.Message.getWrapperField(this, RacialTraits, 35) as RacialTraits;
    }
    set racialTraits(value: RacialTraits) {
        pb_1.Message.setWrapperField(this, 35, value);
    }
    get has_racialTraits() {
        return pb_1.Message.getField(this, 35) != null;
    }
    get location() {
        return pb_1.Message.getWrapperField(this, Coordinates, 36) as Coordinates;
    }
    set location(value: Coordinates) {
        pb_1.Message.setWrapperField(this, 36, value);
    }
    get has_location() {
        return pb_1.Message.getField(this, 36) != null;
    }
    get LastLogin() {
        return pb_1.Message.getFieldWithDefault(this, 37, 0) as number;
    }
    set LastLogin(value: number) {
        pb_1.Message.setField(this, 37, value);
    }
    get LastLogout() {
        return pb_1.Message.getFieldWithDefault(this, 38, 0) as number;
    }
    set LastLogout(value: number) {
        pb_1.Message.setField(this, 38, value);
    }
    static fromObject(data: {
        id?: string;
        discord?: string;
        name?: string;
        race?: string;
        class?: string;
        level?: number;
        alignment?: string;
        background?: string;
        strength?: number;
        dexterity?: number;
        constitution?: number;
        intelligence?: number;
        wisdom?: number;
        charisma?: number;
        hitPoints?: number;
        temporaryHitPoints?: number;
        maxHitPoints?: number;
        armorClass?: number;
        proficiencyBonus?: number;
        skills?: ReturnType<typeof Skill.prototype.toObject>[];
        savingThrows?: ReturnType<typeof SavingThrow.prototype.toObject>[];
        languages?: ReturnType<typeof Language.prototype.toObject>[];
        equipment?: ReturnType<typeof Equipment.prototype.toObject>[];
        features?: ReturnType<typeof Feature.prototype.toObject>[];
        spells?: ReturnType<typeof Spell.prototype.toObject>[];
        spellSlots?: number;
        currentSpellSlots?: number;
        experiencePoints?: number;
        initiative?: number;
        speed?: number;
        hitDice?: string;
        deathSaves?: ReturnType<typeof DeathSaves.prototype.toObject>;
        abilityScoreBonuses?: ReturnType<typeof AbilityScoreBonus.prototype.toObject>[];
        specialAbilities?: ReturnType<typeof SpecialAbility.prototype.toObject>[];
        racialTraits?: ReturnType<typeof RacialTraits.prototype.toObject>;
        location?: ReturnType<typeof Coordinates.prototype.toObject>;
        LastLogin?: number;
        LastLogout?: number;
    }): Player {
        const message = new Player({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.discord != null) {
            message.discord = data.discord;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.race != null) {
            message.race = data.race;
        }
        if (data.class != null) {
            message.class = data.class;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.alignment != null) {
            message.alignment = data.alignment;
        }
        if (data.background != null) {
            message.background = data.background;
        }
        if (data.strength != null) {
            message.strength = data.strength;
        }
        if (data.dexterity != null) {
            message.dexterity = data.dexterity;
        }
        if (data.constitution != null) {
            message.constitution = data.constitution;
        }
        if (data.intelligence != null) {
            message.intelligence = data.intelligence;
        }
        if (data.wisdom != null) {
            message.wisdom = data.wisdom;
        }
        if (data.charisma != null) {
            message.charisma = data.charisma;
        }
        if (data.hitPoints != null) {
            message.hitPoints = data.hitPoints;
        }
        if (data.temporaryHitPoints != null) {
            message.temporaryHitPoints = data.temporaryHitPoints;
        }
        if (data.maxHitPoints != null) {
            message.maxHitPoints = data.maxHitPoints;
        }
        if (data.armorClass != null) {
            message.armorClass = data.armorClass;
        }
        if (data.proficiencyBonus != null) {
            message.proficiencyBonus = data.proficiencyBonus;
        }
        if (data.skills != null) {
            message.skills = data.skills.map(item => Skill.fromObject(item));
        }
        if (data.savingThrows != null) {
            message.savingThrows = data.savingThrows.map(item => SavingThrow.fromObject(item));
        }
        if (data.languages != null) {
            message.languages = data.languages.map(item => Language.fromObject(item));
        }
        if (data.equipment != null) {
            message.equipment = data.equipment.map(item => Equipment.fromObject(item));
        }
        if (data.features != null) {
            message.features = data.features.map(item => Feature.fromObject(item));
        }
        if (data.spells != null) {
            message.spells = data.spells.map(item => Spell.fromObject(item));
        }
        if (data.spellSlots != null) {
            message.spellSlots = data.spellSlots;
        }
        if (data.currentSpellSlots != null) {
            message.currentSpellSlots = data.currentSpellSlots;
        }
        if (data.experiencePoints != null) {
            message.experiencePoints = data.experiencePoints;
        }
        if (data.initiative != null) {
            message.initiative = data.initiative;
        }
        if (data.speed != null) {
            message.speed = data.speed;
        }
        if (data.hitDice != null) {
            message.hitDice = data.hitDice;
        }
        if (data.deathSaves != null) {
            message.deathSaves = DeathSaves.fromObject(data.deathSaves);
        }
        if (data.abilityScoreBonuses != null) {
            message.abilityScoreBonuses = data.abilityScoreBonuses.map(item => AbilityScoreBonus.fromObject(item));
        }
        if (data.specialAbilities != null) {
            message.specialAbilities = data.specialAbilities.map(item => SpecialAbility.fromObject(item));
        }
        if (data.racialTraits != null) {
            message.racialTraits = RacialTraits.fromObject(data.racialTraits);
        }
        if (data.location != null) {
            message.location = Coordinates.fromObject(data.location);
        }
        if (data.LastLogin != null) {
            message.LastLogin = data.LastLogin;
        }
        if (data.LastLogout != null) {
            message.LastLogout = data.LastLogout;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            discord?: string;
            name?: string;
            race?: string;
            class?: string;
            level?: number;
            alignment?: string;
            background?: string;
            strength?: number;
            dexterity?: number;
            constitution?: number;
            intelligence?: number;
            wisdom?: number;
            charisma?: number;
            hitPoints?: number;
            temporaryHitPoints?: number;
            maxHitPoints?: number;
            armorClass?: number;
            proficiencyBonus?: number;
            skills?: ReturnType<typeof Skill.prototype.toObject>[];
            savingThrows?: ReturnType<typeof SavingThrow.prototype.toObject>[];
            languages?: ReturnType<typeof Language.prototype.toObject>[];
            equipment?: ReturnType<typeof Equipment.prototype.toObject>[];
            features?: ReturnType<typeof Feature.prototype.toObject>[];
            spells?: ReturnType<typeof Spell.prototype.toObject>[];
            spellSlots?: number;
            currentSpellSlots?: number;
            experiencePoints?: number;
            initiative?: number;
            speed?: number;
            hitDice?: string;
            deathSaves?: ReturnType<typeof DeathSaves.prototype.toObject>;
            abilityScoreBonuses?: ReturnType<typeof AbilityScoreBonus.prototype.toObject>[];
            specialAbilities?: ReturnType<typeof SpecialAbility.prototype.toObject>[];
            racialTraits?: ReturnType<typeof RacialTraits.prototype.toObject>;
            location?: ReturnType<typeof Coordinates.prototype.toObject>;
            LastLogin?: number;
            LastLogout?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.discord != null) {
            data.discord = this.discord;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.race != null) {
            data.race = this.race;
        }
        if (this.class != null) {
            data.class = this.class;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.alignment != null) {
            data.alignment = this.alignment;
        }
        if (this.background != null) {
            data.background = this.background;
        }
        if (this.strength != null) {
            data.strength = this.strength;
        }
        if (this.dexterity != null) {
            data.dexterity = this.dexterity;
        }
        if (this.constitution != null) {
            data.constitution = this.constitution;
        }
        if (this.intelligence != null) {
            data.intelligence = this.intelligence;
        }
        if (this.wisdom != null) {
            data.wisdom = this.wisdom;
        }
        if (this.charisma != null) {
            data.charisma = this.charisma;
        }
        if (this.hitPoints != null) {
            data.hitPoints = this.hitPoints;
        }
        if (this.temporaryHitPoints != null) {
            data.temporaryHitPoints = this.temporaryHitPoints;
        }
        if (this.maxHitPoints != null) {
            data.maxHitPoints = this.maxHitPoints;
        }
        if (this.armorClass != null) {
            data.armorClass = this.armorClass;
        }
        if (this.proficiencyBonus != null) {
            data.proficiencyBonus = this.proficiencyBonus;
        }
        if (this.skills != null) {
            data.skills = this.skills.map((item: Skill) => item.toObject());
        }
        if (this.savingThrows != null) {
            data.savingThrows = this.savingThrows.map((item: SavingThrow) => item.toObject());
        }
        if (this.languages != null) {
            data.languages = this.languages.map((item: Language) => item.toObject());
        }
        if (this.equipment != null) {
            data.equipment = this.equipment.map((item: Equipment) => item.toObject());
        }
        if (this.features != null) {
            data.features = this.features.map((item: Feature) => item.toObject());
        }
        if (this.spells != null) {
            data.spells = this.spells.map((item: Spell) => item.toObject());
        }
        if (this.spellSlots != null) {
            data.spellSlots = this.spellSlots;
        }
        if (this.currentSpellSlots != null) {
            data.currentSpellSlots = this.currentSpellSlots;
        }
        if (this.experiencePoints != null) {
            data.experiencePoints = this.experiencePoints;
        }
        if (this.initiative != null) {
            data.initiative = this.initiative;
        }
        if (this.speed != null) {
            data.speed = this.speed;
        }
        if (this.hitDice != null) {
            data.hitDice = this.hitDice;
        }
        if (this.deathSaves != null) {
            data.deathSaves = this.deathSaves.toObject();
        }
        if (this.abilityScoreBonuses != null) {
            data.abilityScoreBonuses = this.abilityScoreBonuses.map((item: AbilityScoreBonus) => item.toObject());
        }
        if (this.specialAbilities != null) {
            data.specialAbilities = this.specialAbilities.map((item: SpecialAbility) => item.toObject());
        }
        if (this.racialTraits != null) {
            data.racialTraits = this.racialTraits.toObject();
        }
        if (this.location != null) {
            data.location = this.location.toObject();
        }
        if (this.LastLogin != null) {
            data.LastLogin = this.LastLogin;
        }
        if (this.LastLogout != null) {
            data.LastLogout = this.LastLogout;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.discord.length)
            writer.writeString(2, this.discord);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.race.length)
            writer.writeString(4, this.race);
        if (this.class.length)
            writer.writeString(5, this.class);
        if (this.level != 0)
            writer.writeInt32(6, this.level);
        if (this.alignment.length)
            writer.writeString(7, this.alignment);
        if (this.background.length)
            writer.writeString(8, this.background);
        if (this.strength != 0)
            writer.writeInt32(9, this.strength);
        if (this.dexterity != 0)
            writer.writeInt32(10, this.dexterity);
        if (this.constitution != 0)
            writer.writeInt32(11, this.constitution);
        if (this.intelligence != 0)
            writer.writeInt32(12, this.intelligence);
        if (this.wisdom != 0)
            writer.writeInt32(13, this.wisdom);
        if (this.charisma != 0)
            writer.writeInt32(14, this.charisma);
        if (this.hitPoints != 0)
            writer.writeInt32(15, this.hitPoints);
        if (this.temporaryHitPoints != 0)
            writer.writeInt32(16, this.temporaryHitPoints);
        if (this.maxHitPoints != 0)
            writer.writeInt32(17, this.maxHitPoints);
        if (this.armorClass != 0)
            writer.writeInt32(18, this.armorClass);
        if (this.proficiencyBonus != 0)
            writer.writeInt32(19, this.proficiencyBonus);
        if (this.skills.length)
            writer.writeRepeatedMessage(20, this.skills, (item: Skill) => item.serialize(writer));
        if (this.savingThrows.length)
            writer.writeRepeatedMessage(21, this.savingThrows, (item: SavingThrow) => item.serialize(writer));
        if (this.languages.length)
            writer.writeRepeatedMessage(22, this.languages, (item: Language) => item.serialize(writer));
        if (this.equipment.length)
            writer.writeRepeatedMessage(23, this.equipment, (item: Equipment) => item.serialize(writer));
        if (this.features.length)
            writer.writeRepeatedMessage(24, this.features, (item: Feature) => item.serialize(writer));
        if (this.spells.length)
            writer.writeRepeatedMessage(25, this.spells, (item: Spell) => item.serialize(writer));
        if (this.spellSlots != 0)
            writer.writeInt32(26, this.spellSlots);
        if (this.currentSpellSlots != 0)
            writer.writeInt32(27, this.currentSpellSlots);
        if (this.experiencePoints != 0)
            writer.writeInt32(28, this.experiencePoints);
        if (this.initiative != 0)
            writer.writeInt32(29, this.initiative);
        if (this.speed != 0)
            writer.writeInt32(30, this.speed);
        if (this.hitDice.length)
            writer.writeString(31, this.hitDice);
        if (this.has_deathSaves)
            writer.writeMessage(32, this.deathSaves, () => this.deathSaves.serialize(writer));
        if (this.abilityScoreBonuses.length)
            writer.writeRepeatedMessage(33, this.abilityScoreBonuses, (item: AbilityScoreBonus) => item.serialize(writer));
        if (this.specialAbilities.length)
            writer.writeRepeatedMessage(34, this.specialAbilities, (item: SpecialAbility) => item.serialize(writer));
        if (this.has_racialTraits)
            writer.writeMessage(35, this.racialTraits, () => this.racialTraits.serialize(writer));
        if (this.has_location)
            writer.writeMessage(36, this.location, () => this.location.serialize(writer));
        if (this.LastLogin != 0)
            writer.writeInt64(37, this.LastLogin);
        if (this.LastLogout != 0)
            writer.writeInt64(38, this.LastLogout);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Player {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Player();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.discord = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.race = reader.readString();
                    break;
                case 5:
                    message.class = reader.readString();
                    break;
                case 6:
                    message.level = reader.readInt32();
                    break;
                case 7:
                    message.alignment = reader.readString();
                    break;
                case 8:
                    message.background = reader.readString();
                    break;
                case 9:
                    message.strength = reader.readInt32();
                    break;
                case 10:
                    message.dexterity = reader.readInt32();
                    break;
                case 11:
                    message.constitution = reader.readInt32();
                    break;
                case 12:
                    message.intelligence = reader.readInt32();
                    break;
                case 13:
                    message.wisdom = reader.readInt32();
                    break;
                case 14:
                    message.charisma = reader.readInt32();
                    break;
                case 15:
                    message.hitPoints = reader.readInt32();
                    break;
                case 16:
                    message.temporaryHitPoints = reader.readInt32();
                    break;
                case 17:
                    message.maxHitPoints = reader.readInt32();
                    break;
                case 18:
                    message.armorClass = reader.readInt32();
                    break;
                case 19:
                    message.proficiencyBonus = reader.readInt32();
                    break;
                case 20:
                    reader.readMessage(message.skills, () => pb_1.Message.addToRepeatedWrapperField(message, 20, Skill.deserialize(reader), Skill));
                    break;
                case 21:
                    reader.readMessage(message.savingThrows, () => pb_1.Message.addToRepeatedWrapperField(message, 21, SavingThrow.deserialize(reader), SavingThrow));
                    break;
                case 22:
                    reader.readMessage(message.languages, () => pb_1.Message.addToRepeatedWrapperField(message, 22, Language.deserialize(reader), Language));
                    break;
                case 23:
                    reader.readMessage(message.equipment, () => pb_1.Message.addToRepeatedWrapperField(message, 23, Equipment.deserialize(reader), Equipment));
                    break;
                case 24:
                    reader.readMessage(message.features, () => pb_1.Message.addToRepeatedWrapperField(message, 24, Feature.deserialize(reader), Feature));
                    break;
                case 25:
                    reader.readMessage(message.spells, () => pb_1.Message.addToRepeatedWrapperField(message, 25, Spell.deserialize(reader), Spell));
                    break;
                case 26:
                    message.spellSlots = reader.readInt32();
                    break;
                case 27:
                    message.currentSpellSlots = reader.readInt32();
                    break;
                case 28:
                    message.experiencePoints = reader.readInt32();
                    break;
                case 29:
                    message.initiative = reader.readInt32();
                    break;
                case 30:
                    message.speed = reader.readInt32();
                    break;
                case 31:
                    message.hitDice = reader.readString();
                    break;
                case 32:
                    reader.readMessage(message.deathSaves, () => message.deathSaves = DeathSaves.deserialize(reader));
                    break;
                case 33:
                    reader.readMessage(message.abilityScoreBonuses, () => pb_1.Message.addToRepeatedWrapperField(message, 33, AbilityScoreBonus.deserialize(reader), AbilityScoreBonus));
                    break;
                case 34:
                    reader.readMessage(message.specialAbilities, () => pb_1.Message.addToRepeatedWrapperField(message, 34, SpecialAbility.deserialize(reader), SpecialAbility));
                    break;
                case 35:
                    reader.readMessage(message.racialTraits, () => message.racialTraits = RacialTraits.deserialize(reader));
                    break;
                case 36:
                    reader.readMessage(message.location, () => message.location = Coordinates.deserialize(reader));
                    break;
                case 37:
                    message.LastLogin = reader.readInt64();
                    break;
                case 38:
                    message.LastLogout = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Player {
        return Player.deserialize(bytes);
    }
}
export class Skill extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): Skill {
        const message = new Skill({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Skill {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Skill();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Skill {
        return Skill.deserialize(bytes);
    }
}
export class SavingThrow extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): SavingThrow {
        const message = new SavingThrow({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SavingThrow {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SavingThrow();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SavingThrow {
        return SavingThrow.deserialize(bytes);
    }
}
export class Language extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): Language {
        const message = new Language({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Language {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Language();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Language {
        return Language.deserialize(bytes);
    }
}
export class Equipment extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): Equipment {
        const message = new Equipment({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Equipment {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Equipment();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Equipment {
        return Equipment.deserialize(bytes);
    }
}
export class Feature extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): Feature {
        const message = new Feature({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Feature {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Feature();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Feature {
        return Feature.deserialize(bytes);
    }
}
export class Spell extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): Spell {
        const message = new Spell({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Spell {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Spell();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Spell {
        return Spell.deserialize(bytes);
    }
}
export class SpecialAbility extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): SpecialAbility {
        const message = new SpecialAbility({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpecialAbility {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpecialAbility();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SpecialAbility {
        return SpecialAbility.deserialize(bytes);
    }
}
export class AbilityScoreBonus extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        value?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set value(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        value?: number;
    }): AbilityScoreBonus {
        const message = new AbilityScoreBonus({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            value?: number;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.value != 0)
            writer.writeInt32(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AbilityScoreBonus {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AbilityScoreBonus();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.value = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AbilityScoreBonus {
        return AbilityScoreBonus.deserialize(bytes);
    }
}
export class DeathSaves extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        successes?: number;
        failures?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("successes" in data && data.successes != undefined) {
                this.successes = data.successes;
            }
            if ("failures" in data && data.failures != undefined) {
                this.failures = data.failures;
            }
        }
    }
    get successes() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set successes(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get failures() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set failures(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        successes?: number;
        failures?: number;
    }): DeathSaves {
        const message = new DeathSaves({});
        if (data.successes != null) {
            message.successes = data.successes;
        }
        if (data.failures != null) {
            message.failures = data.failures;
        }
        return message;
    }
    toObject() {
        const data: {
            successes?: number;
            failures?: number;
        } = {};
        if (this.successes != null) {
            data.successes = this.successes;
        }
        if (this.failures != null) {
            data.failures = this.failures;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.successes != 0)
            writer.writeInt32(1, this.successes);
        if (this.failures != 0)
            writer.writeInt32(2, this.failures);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeathSaves {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeathSaves();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.successes = reader.readInt32();
                    break;
                case 2:
                    message.failures = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeathSaves {
        return DeathSaves.deserialize(bytes);
    }
}
export class RacialTraits extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        description?: string;
        darkvision?: number;
        size?: string;
        speed?: number;
        languages?: Language[];
        abilityScoreBonuses?: number;
        specialAbilities?: SpecialAbility[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("darkvision" in data && data.darkvision != undefined) {
                this.darkvision = data.darkvision;
            }
            if ("size" in data && data.size != undefined) {
                this.size = data.size;
            }
            if ("speed" in data && data.speed != undefined) {
                this.speed = data.speed;
            }
            if ("languages" in data && data.languages != undefined) {
                this.languages = data.languages;
            }
            if ("abilityScoreBonuses" in data && data.abilityScoreBonuses != undefined) {
                this.abilityScoreBonuses = data.abilityScoreBonuses;
            }
            if ("specialAbilities" in data && data.specialAbilities != undefined) {
                this.specialAbilities = data.specialAbilities;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get darkvision() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set darkvision(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get size() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set size(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get speed() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set speed(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get languages() {
        return pb_1.Message.getRepeatedWrapperField(this, Language, 6) as Language[];
    }
    set languages(value: Language[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get abilityScoreBonuses() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set abilityScoreBonuses(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get specialAbilities() {
        return pb_1.Message.getRepeatedWrapperField(this, SpecialAbility, 8) as SpecialAbility[];
    }
    set specialAbilities(value: SpecialAbility[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    static fromObject(data: {
        name?: string;
        description?: string;
        darkvision?: number;
        size?: string;
        speed?: number;
        languages?: ReturnType<typeof Language.prototype.toObject>[];
        abilityScoreBonuses?: number;
        specialAbilities?: ReturnType<typeof SpecialAbility.prototype.toObject>[];
    }): RacialTraits {
        const message = new RacialTraits({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.darkvision != null) {
            message.darkvision = data.darkvision;
        }
        if (data.size != null) {
            message.size = data.size;
        }
        if (data.speed != null) {
            message.speed = data.speed;
        }
        if (data.languages != null) {
            message.languages = data.languages.map(item => Language.fromObject(item));
        }
        if (data.abilityScoreBonuses != null) {
            message.abilityScoreBonuses = data.abilityScoreBonuses;
        }
        if (data.specialAbilities != null) {
            message.specialAbilities = data.specialAbilities.map(item => SpecialAbility.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            description?: string;
            darkvision?: number;
            size?: string;
            speed?: number;
            languages?: ReturnType<typeof Language.prototype.toObject>[];
            abilityScoreBonuses?: number;
            specialAbilities?: ReturnType<typeof SpecialAbility.prototype.toObject>[];
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.darkvision != null) {
            data.darkvision = this.darkvision;
        }
        if (this.size != null) {
            data.size = this.size;
        }
        if (this.speed != null) {
            data.speed = this.speed;
        }
        if (this.languages != null) {
            data.languages = this.languages.map((item: Language) => item.toObject());
        }
        if (this.abilityScoreBonuses != null) {
            data.abilityScoreBonuses = this.abilityScoreBonuses;
        }
        if (this.specialAbilities != null) {
            data.specialAbilities = this.specialAbilities.map((item: SpecialAbility) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.description.length)
            writer.writeString(2, this.description);
        if (this.darkvision != 0)
            writer.writeInt32(3, this.darkvision);
        if (this.size.length)
            writer.writeString(4, this.size);
        if (this.speed != 0)
            writer.writeInt32(5, this.speed);
        if (this.languages.length)
            writer.writeRepeatedMessage(6, this.languages, (item: Language) => item.serialize(writer));
        if (this.abilityScoreBonuses != 0)
            writer.writeInt32(7, this.abilityScoreBonuses);
        if (this.specialAbilities.length)
            writer.writeRepeatedMessage(8, this.specialAbilities, (item: SpecialAbility) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RacialTraits {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RacialTraits();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.description = reader.readString();
                    break;
                case 3:
                    message.darkvision = reader.readInt32();
                    break;
                case 4:
                    message.size = reader.readString();
                    break;
                case 5:
                    message.speed = reader.readInt32();
                    break;
                case 6:
                    reader.readMessage(message.languages, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Language.deserialize(reader), Language));
                    break;
                case 7:
                    message.abilityScoreBonuses = reader.readInt32();
                    break;
                case 8:
                    reader.readMessage(message.specialAbilities, () => pb_1.Message.addToRepeatedWrapperField(message, 8, SpecialAbility.deserialize(reader), SpecialAbility));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RacialTraits {
        return RacialTraits.deserialize(bytes);
    }
}
export class Location extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        description?: string;
        items?: Item[];
        npcs?: NPC[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("items" in data && data.items != undefined) {
                this.items = data.items;
            }
            if ("npcs" in data && data.npcs != undefined) {
                this.npcs = data.npcs;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get items() {
        return pb_1.Message.getRepeatedWrapperField(this, Item, 3) as Item[];
    }
    set items(value: Item[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get npcs() {
        return pb_1.Message.getRepeatedWrapperField(this, NPC, 4) as NPC[];
    }
    set npcs(value: NPC[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        description?: string;
        items?: ReturnType<typeof Item.prototype.toObject>[];
        npcs?: ReturnType<typeof NPC.prototype.toObject>[];
    }): Location {
        const message = new Location({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.items != null) {
            message.items = data.items.map(item => Item.fromObject(item));
        }
        if (data.npcs != null) {
            message.npcs = data.npcs.map(item => NPC.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            description?: string;
            items?: ReturnType<typeof Item.prototype.toObject>[];
            npcs?: ReturnType<typeof NPC.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.items != null) {
            data.items = this.items.map((item: Item) => item.toObject());
        }
        if (this.npcs != null) {
            data.npcs = this.npcs.map((item: NPC) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.description.length)
            writer.writeString(2, this.description);
        if (this.items.length)
            writer.writeRepeatedMessage(3, this.items, (item: Item) => item.serialize(writer));
        if (this.npcs.length)
            writer.writeRepeatedMessage(4, this.npcs, (item: NPC) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Location {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Location();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.description = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Item.deserialize(reader), Item));
                    break;
                case 4:
                    reader.readMessage(message.npcs, () => pb_1.Message.addToRepeatedWrapperField(message, 4, NPC.deserialize(reader), NPC));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Location {
        return Location.deserialize(bytes);
    }
}
export class Item extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): Item {
        const message = new Item({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Item {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Item();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Item {
        return Item.deserialize(bytes);
    }
}
export class NPC extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): NPC {
        const message = new NPC({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NPC {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NPC();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): NPC {
        return NPC.deserialize(bytes);
    }
}
export class CreatePlayerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 2) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        name?: string;
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): CreatePlayerRequest {
        const message = new CreatePlayerRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.has_player)
            writer.writeMessage(2, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePlayerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePlayerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreatePlayerRequest {
        return CreatePlayerRequest.deserialize(bytes);
    }
}
export class CreatePlayerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 1) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): CreatePlayerResponse {
        const message = new CreatePlayerResponse({});
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_player)
            writer.writeMessage(1, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePlayerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePlayerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreatePlayerResponse {
        return CreatePlayerResponse.deserialize(bytes);
    }
}
export class MovePlayerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player_id?: string;
        new_location?: Coordinates;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player_id" in data && data.player_id != undefined) {
                this.player_id = data.player_id;
            }
            if ("new_location" in data && data.new_location != undefined) {
                this.new_location = data.new_location;
            }
        }
    }
    get player_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set player_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get new_location() {
        return pb_1.Message.getWrapperField(this, Coordinates, 2) as Coordinates;
    }
    set new_location(value: Coordinates) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_new_location() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        player_id?: string;
        new_location?: ReturnType<typeof Coordinates.prototype.toObject>;
    }): MovePlayerRequest {
        const message = new MovePlayerRequest({});
        if (data.player_id != null) {
            message.player_id = data.player_id;
        }
        if (data.new_location != null) {
            message.new_location = Coordinates.fromObject(data.new_location);
        }
        return message;
    }
    toObject() {
        const data: {
            player_id?: string;
            new_location?: ReturnType<typeof Coordinates.prototype.toObject>;
        } = {};
        if (this.player_id != null) {
            data.player_id = this.player_id;
        }
        if (this.new_location != null) {
            data.new_location = this.new_location.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.player_id.length)
            writer.writeString(1, this.player_id);
        if (this.has_new_location)
            writer.writeMessage(2, this.new_location, () => this.new_location.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MovePlayerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MovePlayerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.player_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.new_location, () => message.new_location = Coordinates.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MovePlayerRequest {
        return MovePlayerRequest.deserialize(bytes);
    }
}
export class MovePlayerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 1) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): MovePlayerResponse {
        const message = new MovePlayerResponse({});
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_player)
            writer.writeMessage(1, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MovePlayerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MovePlayerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MovePlayerResponse {
        return MovePlayerResponse.deserialize(bytes);
    }
}
export class GetLocationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        coordinates?: Coordinates;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("coordinates" in data && data.coordinates != undefined) {
                this.coordinates = data.coordinates;
            }
        }
    }
    get coordinates() {
        return pb_1.Message.getWrapperField(this, Coordinates, 1) as Coordinates;
    }
    set coordinates(value: Coordinates) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_coordinates() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        coordinates?: ReturnType<typeof Coordinates.prototype.toObject>;
    }): GetLocationRequest {
        const message = new GetLocationRequest({});
        if (data.coordinates != null) {
            message.coordinates = Coordinates.fromObject(data.coordinates);
        }
        return message;
    }
    toObject() {
        const data: {
            coordinates?: ReturnType<typeof Coordinates.prototype.toObject>;
        } = {};
        if (this.coordinates != null) {
            data.coordinates = this.coordinates.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_coordinates)
            writer.writeMessage(1, this.coordinates, () => this.coordinates.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLocationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLocationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.coordinates, () => message.coordinates = Coordinates.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetLocationRequest {
        return GetLocationRequest.deserialize(bytes);
    }
}
export class GetLocationResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        location?: Location;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
        }
    }
    get location() {
        return pb_1.Message.getWrapperField(this, Location, 1) as Location;
    }
    set location(value: Location) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_location() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        location?: ReturnType<typeof Location.prototype.toObject>;
    }): GetLocationResponse {
        const message = new GetLocationResponse({});
        if (data.location != null) {
            message.location = Location.fromObject(data.location);
        }
        return message;
    }
    toObject() {
        const data: {
            location?: ReturnType<typeof Location.prototype.toObject>;
        } = {};
        if (this.location != null) {
            data.location = this.location.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_location)
            writer.writeMessage(1, this.location, () => this.location.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLocationResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLocationResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.location, () => message.location = Location.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetLocationResponse {
        return GetLocationResponse.deserialize(bytes);
    }
}
export class ListPlayersRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ListPlayersRequest {
        const message = new ListPlayersRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPlayersRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPlayersRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListPlayersRequest {
        return ListPlayersRequest.deserialize(bytes);
    }
}
export class ListPlayersResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        players?: Player[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("players" in data && data.players != undefined) {
                this.players = data.players;
            }
        }
    }
    get players() {
        return pb_1.Message.getRepeatedWrapperField(this, Player, 1) as Player[];
    }
    set players(value: Player[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        players?: ReturnType<typeof Player.prototype.toObject>[];
    }): ListPlayersResponse {
        const message = new ListPlayersResponse({});
        if (data.players != null) {
            message.players = data.players.map(item => Player.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            players?: ReturnType<typeof Player.prototype.toObject>[];
        } = {};
        if (this.players != null) {
            data.players = this.players.map((item: Player) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.players.length)
            writer.writeRepeatedMessage(1, this.players, (item: Player) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPlayersResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPlayersResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.players, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Player.deserialize(reader), Player));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListPlayersResponse {
        return ListPlayersResponse.deserialize(bytes);
    }
}
export class GetPlayerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        playerId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("playerId" in data && data.playerId != undefined) {
                this.playerId = data.playerId;
            }
        }
    }
    get playerId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set playerId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        playerId?: string;
    }): GetPlayerRequest {
        const message = new GetPlayerRequest({});
        if (data.playerId != null) {
            message.playerId = data.playerId;
        }
        return message;
    }
    toObject() {
        const data: {
            playerId?: string;
        } = {};
        if (this.playerId != null) {
            data.playerId = this.playerId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.playerId.length)
            writer.writeString(1, this.playerId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.playerId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetPlayerRequest {
        return GetPlayerRequest.deserialize(bytes);
    }
}
export class GetPlayerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 1) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): GetPlayerResponse {
        const message = new GetPlayerResponse({});
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_player)
            writer.writeMessage(1, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetPlayerResponse {
        return GetPlayerResponse.deserialize(bytes);
    }
}
export class SetPlayerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 1) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): SetPlayerRequest {
        const message = new SetPlayerRequest({});
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_player)
            writer.writeMessage(1, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetPlayerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetPlayerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SetPlayerRequest {
        return SetPlayerRequest.deserialize(bytes);
    }
}
export class SetPlayerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 1) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): SetPlayerResponse {
        const message = new SetPlayerResponse({});
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_player)
            writer.writeMessage(1, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetPlayerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetPlayerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SetPlayerResponse {
        return SetPlayerResponse.deserialize(bytes);
    }
}
export class UpdatePlayerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player_id?: string;
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player_id" in data && data.player_id != undefined) {
                this.player_id = data.player_id;
            }
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get player_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set player_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 2) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        player_id?: string;
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): UpdatePlayerRequest {
        const message = new UpdatePlayerRequest({});
        if (data.player_id != null) {
            message.player_id = data.player_id;
        }
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            player_id?: string;
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.player_id != null) {
            data.player_id = this.player_id;
        }
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.player_id.length)
            writer.writeString(1, this.player_id);
        if (this.has_player)
            writer.writeMessage(2, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePlayerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePlayerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.player_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdatePlayerRequest {
        return UpdatePlayerRequest.deserialize(bytes);
    }
}
export class UpdatePlayerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player?: Player;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
        }
    }
    get player() {
        return pb_1.Message.getWrapperField(this, Player, 1) as Player;
    }
    set player(value: Player) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_player() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        player?: ReturnType<typeof Player.prototype.toObject>;
    }): UpdatePlayerResponse {
        const message = new UpdatePlayerResponse({});
        if (data.player != null) {
            message.player = Player.fromObject(data.player);
        }
        return message;
    }
    toObject() {
        const data: {
            player?: ReturnType<typeof Player.prototype.toObject>;
        } = {};
        if (this.player != null) {
            data.player = this.player.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_player)
            writer.writeMessage(1, this.player, () => this.player.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePlayerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePlayerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.player, () => message.player = Player.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdatePlayerResponse {
        return UpdatePlayerResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedGameService {
    static definition = {
        CreatePlayer: {
            path: "/Game/CreatePlayer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreatePlayerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreatePlayerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreatePlayerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreatePlayerResponse.deserialize(new Uint8Array(bytes))
        },
        MovePlayer: {
            path: "/Game/MovePlayer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: MovePlayerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => MovePlayerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: MovePlayerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => MovePlayerResponse.deserialize(new Uint8Array(bytes))
        },
        GetLocation: {
            path: "/Game/GetLocation",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetLocationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetLocationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetLocationResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetLocationResponse.deserialize(new Uint8Array(bytes))
        },
        ListPlayers: {
            path: "/Game/ListPlayers",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListPlayersRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListPlayersRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListPlayersResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListPlayersResponse.deserialize(new Uint8Array(bytes))
        },
        GetPlayer: {
            path: "/Game/GetPlayer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetPlayerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetPlayerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetPlayerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetPlayerResponse.deserialize(new Uint8Array(bytes))
        },
        SetPlayer: {
            path: "/Game/SetPlayer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SetPlayerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SetPlayerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SetPlayerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SetPlayerResponse.deserialize(new Uint8Array(bytes))
        },
        UpdatePlayer: {
            path: "/Game/UpdatePlayer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdatePlayerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdatePlayerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdatePlayerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdatePlayerResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreatePlayer(call: grpc_1.ServerUnaryCall<CreatePlayerRequest, CreatePlayerResponse>, callback: grpc_1.sendUnaryData<CreatePlayerResponse>): void;
    abstract MovePlayer(call: grpc_1.ServerUnaryCall<MovePlayerRequest, MovePlayerResponse>, callback: grpc_1.sendUnaryData<MovePlayerResponse>): void;
    abstract GetLocation(call: grpc_1.ServerUnaryCall<GetLocationRequest, GetLocationResponse>, callback: grpc_1.sendUnaryData<GetLocationResponse>): void;
    abstract ListPlayers(call: grpc_1.ServerUnaryCall<ListPlayersRequest, ListPlayersResponse>, callback: grpc_1.sendUnaryData<ListPlayersResponse>): void;
    abstract GetPlayer(call: grpc_1.ServerUnaryCall<GetPlayerRequest, GetPlayerResponse>, callback: grpc_1.sendUnaryData<GetPlayerResponse>): void;
    abstract SetPlayer(call: grpc_1.ServerUnaryCall<SetPlayerRequest, SetPlayerResponse>, callback: grpc_1.sendUnaryData<SetPlayerResponse>): void;
    abstract UpdatePlayer(call: grpc_1.ServerUnaryCall<UpdatePlayerRequest, UpdatePlayerResponse>, callback: grpc_1.sendUnaryData<UpdatePlayerResponse>): void;
}
export class GameClient extends grpc_1.makeGenericClientConstructor(UnimplementedGameService.definition, "Game", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    CreatePlayer: GrpcUnaryServiceInterface<CreatePlayerRequest, CreatePlayerResponse> = (message: CreatePlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreatePlayerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreatePlayerResponse>, callback?: grpc_1.requestCallback<CreatePlayerResponse>): grpc_1.ClientUnaryCall => {
        return super.CreatePlayer(message, metadata, options, callback);
    };
    MovePlayer: GrpcUnaryServiceInterface<MovePlayerRequest, MovePlayerResponse> = (message: MovePlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MovePlayerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MovePlayerResponse>, callback?: grpc_1.requestCallback<MovePlayerResponse>): grpc_1.ClientUnaryCall => {
        return super.MovePlayer(message, metadata, options, callback);
    };
    GetLocation: GrpcUnaryServiceInterface<GetLocationRequest, GetLocationResponse> = (message: GetLocationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetLocationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetLocationResponse>, callback?: grpc_1.requestCallback<GetLocationResponse>): grpc_1.ClientUnaryCall => {
        return super.GetLocation(message, metadata, options, callback);
    };
    ListPlayers: GrpcUnaryServiceInterface<ListPlayersRequest, ListPlayersResponse> = (message: ListPlayersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListPlayersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListPlayersResponse>, callback?: grpc_1.requestCallback<ListPlayersResponse>): grpc_1.ClientUnaryCall => {
        return super.ListPlayers(message, metadata, options, callback);
    };
    GetPlayer: GrpcUnaryServiceInterface<GetPlayerRequest, GetPlayerResponse> = (message: GetPlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetPlayerResponse>, callback?: grpc_1.requestCallback<GetPlayerResponse>): grpc_1.ClientUnaryCall => {
        return super.GetPlayer(message, metadata, options, callback);
    };
    SetPlayer: GrpcUnaryServiceInterface<SetPlayerRequest, SetPlayerResponse> = (message: SetPlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetPlayerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetPlayerResponse>, callback?: grpc_1.requestCallback<SetPlayerResponse>): grpc_1.ClientUnaryCall => {
        return super.SetPlayer(message, metadata, options, callback);
    };
    UpdatePlayer: GrpcUnaryServiceInterface<UpdatePlayerRequest, UpdatePlayerResponse> = (message: UpdatePlayerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdatePlayerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdatePlayerResponse>, callback?: grpc_1.requestCallback<UpdatePlayerResponse>): grpc_1.ClientUnaryCall => {
        return super.UpdatePlayer(message, metadata, options, callback);
    };
}
