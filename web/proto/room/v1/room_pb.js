// source: room/v1/room.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.room.v1.Coordinates', null, global);
goog.exportSymbol('proto.room.v1.GetLocationRequest', null, global);
goog.exportSymbol('proto.room.v1.GetLocationResponse', null, global);
goog.exportSymbol('proto.room.v1.GetRoomStateRequest', null, global);
goog.exportSymbol('proto.room.v1.GetRoomStateResponse', null, global);
goog.exportSymbol('proto.room.v1.InterpType', null, global);
goog.exportSymbol('proto.room.v1.Item', null, global);
goog.exportSymbol('proto.room.v1.Location', null, global);
goog.exportSymbol('proto.room.v1.NPC', null, global);
goog.exportSymbol('proto.room.v1.Room', null, global);
goog.exportSymbol('proto.room.v1.Room.Exit', null, global);
goog.exportSymbol('proto.room.v1.RoomState', null, global);
goog.exportSymbol('proto.room.v1.UserCredentials', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.room.v1.Room.repeatedFields_, null);
};
goog.inherits(proto.room.v1.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.Room.displayName = 'proto.room.v1.Room';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.Room.Exit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.Room.Exit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.Room.Exit.displayName = 'proto.room.v1.Room.Exit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.Coordinates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.Coordinates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.Coordinates.displayName = 'proto.room.v1.Coordinates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.UserCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.UserCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.UserCredentials.displayName = 'proto.room.v1.UserCredentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.room.v1.Location.repeatedFields_, null);
};
goog.inherits(proto.room.v1.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.Location.displayName = 'proto.room.v1.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.GetRoomStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.GetRoomStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.GetRoomStateRequest.displayName = 'proto.room.v1.GetRoomStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.GetRoomStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.GetRoomStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.GetRoomStateResponse.displayName = 'proto.room.v1.GetRoomStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.GetLocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.GetLocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.GetLocationRequest.displayName = 'proto.room.v1.GetLocationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.GetLocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.GetLocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.GetLocationResponse.displayName = 'proto.room.v1.GetLocationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.RoomState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.room.v1.RoomState.repeatedFields_, null);
};
goog.inherits(proto.room.v1.RoomState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.RoomState.displayName = 'proto.room.v1.RoomState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.Item.displayName = 'proto.room.v1.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.room.v1.NPC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.room.v1.NPC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.room.v1.NPC.displayName = 'proto.room.v1.NPC';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.room.v1.Room.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.room.v1.Item.toObject, includeInstance),
    npcsList: jspb.Message.toObjectList(msg.getNpcsList(),
    proto.room.v1.NPC.toObject, includeInstance),
    playersList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    coordinates: (f = msg.getCoordinates()) && proto.room.v1.Coordinates.toObject(includeInstance, f),
    northExit: (f = msg.getNorthExit()) && proto.room.v1.Room.Exit.toObject(includeInstance, f),
    eastExit: (f = msg.getEastExit()) && proto.room.v1.Room.Exit.toObject(includeInstance, f),
    southExit: (f = msg.getSouthExit()) && proto.room.v1.Room.Exit.toObject(includeInstance, f),
    westExit: (f = msg.getWestExit()) && proto.room.v1.Room.Exit.toObject(includeInstance, f),
    upExit: (f = msg.getUpExit()) && proto.room.v1.Room.Exit.toObject(includeInstance, f),
    downExit: (f = msg.getDownExit()) && proto.room.v1.Room.Exit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.Room}
 */
proto.room.v1.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.Room;
  return proto.room.v1.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.Room}
 */
proto.room.v1.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.room.v1.Item;
      reader.readMessage(value,proto.room.v1.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 4:
      var value = new proto.room.v1.NPC;
      reader.readMessage(value,proto.room.v1.NPC.deserializeBinaryFromReader);
      msg.addNpcs(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayers(value);
      break;
    case 6:
      var value = new proto.room.v1.Coordinates;
      reader.readMessage(value,proto.room.v1.Coordinates.deserializeBinaryFromReader);
      msg.setCoordinates(value);
      break;
    case 7:
      var value = new proto.room.v1.Room.Exit;
      reader.readMessage(value,proto.room.v1.Room.Exit.deserializeBinaryFromReader);
      msg.setNorthExit(value);
      break;
    case 8:
      var value = new proto.room.v1.Room.Exit;
      reader.readMessage(value,proto.room.v1.Room.Exit.deserializeBinaryFromReader);
      msg.setEastExit(value);
      break;
    case 9:
      var value = new proto.room.v1.Room.Exit;
      reader.readMessage(value,proto.room.v1.Room.Exit.deserializeBinaryFromReader);
      msg.setSouthExit(value);
      break;
    case 10:
      var value = new proto.room.v1.Room.Exit;
      reader.readMessage(value,proto.room.v1.Room.Exit.deserializeBinaryFromReader);
      msg.setWestExit(value);
      break;
    case 11:
      var value = new proto.room.v1.Room.Exit;
      reader.readMessage(value,proto.room.v1.Room.Exit.deserializeBinaryFromReader);
      msg.setUpExit(value);
      break;
    case 12:
      var value = new proto.room.v1.Room.Exit;
      reader.readMessage(value,proto.room.v1.Room.Exit.deserializeBinaryFromReader);
      msg.setDownExit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.room.v1.Item.serializeBinaryToWriter
    );
  }
  f = message.getNpcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.room.v1.NPC.serializeBinaryToWriter
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getCoordinates();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.room.v1.Coordinates.serializeBinaryToWriter
    );
  }
  f = message.getNorthExit();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.room.v1.Room.Exit.serializeBinaryToWriter
    );
  }
  f = message.getEastExit();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.room.v1.Room.Exit.serializeBinaryToWriter
    );
  }
  f = message.getSouthExit();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.room.v1.Room.Exit.serializeBinaryToWriter
    );
  }
  f = message.getWestExit();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.room.v1.Room.Exit.serializeBinaryToWriter
    );
  }
  f = message.getUpExit();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.room.v1.Room.Exit.serializeBinaryToWriter
    );
  }
  f = message.getDownExit();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.room.v1.Room.Exit.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.Room.Exit.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.Room.Exit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.Room.Exit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Room.Exit.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    open: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    locked: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    alwaysOpen: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    targetRoom: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.Exit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.Room.Exit;
  return proto.room.v1.Room.Exit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.Room.Exit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.Exit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOpen(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlwaysOpen(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetRoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.Room.Exit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.Room.Exit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.Room.Exit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Room.Exit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOpen();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getLocked();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAlwaysOpen();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.room.v1.Room.Exit.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.Room.Exit} returns this
 */
proto.room.v1.Room.Exit.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool open = 2;
 * @return {boolean}
 */
proto.room.v1.Room.Exit.prototype.getOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.room.v1.Room.Exit} returns this
 */
proto.room.v1.Room.Exit.prototype.setOpen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool locked = 3;
 * @return {boolean}
 */
proto.room.v1.Room.Exit.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.room.v1.Room.Exit} returns this
 */
proto.room.v1.Room.Exit.prototype.setLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool always_open = 4;
 * @return {boolean}
 */
proto.room.v1.Room.Exit.prototype.getAlwaysOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.room.v1.Room.Exit} returns this
 */
proto.room.v1.Room.Exit.prototype.setAlwaysOpen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string target_room = 5;
 * @return {string}
 */
proto.room.v1.Room.Exit.prototype.getTargetRoom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.Room.Exit} returns this
 */
proto.room.v1.Room.Exit.prototype.setTargetRoom = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.room.v1.Room.Exit} returns this
 */
proto.room.v1.Room.Exit.prototype.clearTargetRoom = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.Exit.prototype.hasTargetRoom = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.room.v1.Room.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.room.v1.Room.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Item items = 3;
 * @return {!Array<!proto.room.v1.Item>}
 */
proto.room.v1.Room.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.room.v1.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.room.v1.Item, 3));
};


/**
 * @param {!Array<!proto.room.v1.Item>} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.room.v1.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.room.v1.Item}
 */
proto.room.v1.Room.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.room.v1.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * repeated NPC npcs = 4;
 * @return {!Array<!proto.room.v1.NPC>}
 */
proto.room.v1.Room.prototype.getNpcsList = function() {
  return /** @type{!Array<!proto.room.v1.NPC>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.room.v1.NPC, 4));
};


/**
 * @param {!Array<!proto.room.v1.NPC>} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setNpcsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.room.v1.NPC=} opt_value
 * @param {number=} opt_index
 * @return {!proto.room.v1.NPC}
 */
proto.room.v1.Room.prototype.addNpcs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.room.v1.NPC, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearNpcsList = function() {
  return this.setNpcsList([]);
};


/**
 * repeated string players = 5;
 * @return {!Array<string>}
 */
proto.room.v1.Room.prototype.getPlayersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.setPlayersList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.addPlayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};


/**
 * optional Coordinates coordinates = 6;
 * @return {?proto.room.v1.Coordinates}
 */
proto.room.v1.Room.prototype.getCoordinates = function() {
  return /** @type{?proto.room.v1.Coordinates} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Coordinates, 6));
};


/**
 * @param {?proto.room.v1.Coordinates|undefined} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setCoordinates = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearCoordinates = function() {
  return this.setCoordinates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.prototype.hasCoordinates = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Exit north_exit = 7;
 * @return {?proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.prototype.getNorthExit = function() {
  return /** @type{?proto.room.v1.Room.Exit} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Room.Exit, 7));
};


/**
 * @param {?proto.room.v1.Room.Exit|undefined} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setNorthExit = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearNorthExit = function() {
  return this.setNorthExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.prototype.hasNorthExit = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Exit east_exit = 8;
 * @return {?proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.prototype.getEastExit = function() {
  return /** @type{?proto.room.v1.Room.Exit} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Room.Exit, 8));
};


/**
 * @param {?proto.room.v1.Room.Exit|undefined} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setEastExit = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearEastExit = function() {
  return this.setEastExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.prototype.hasEastExit = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Exit south_exit = 9;
 * @return {?proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.prototype.getSouthExit = function() {
  return /** @type{?proto.room.v1.Room.Exit} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Room.Exit, 9));
};


/**
 * @param {?proto.room.v1.Room.Exit|undefined} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setSouthExit = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearSouthExit = function() {
  return this.setSouthExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.prototype.hasSouthExit = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Exit west_exit = 10;
 * @return {?proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.prototype.getWestExit = function() {
  return /** @type{?proto.room.v1.Room.Exit} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Room.Exit, 10));
};


/**
 * @param {?proto.room.v1.Room.Exit|undefined} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setWestExit = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearWestExit = function() {
  return this.setWestExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.prototype.hasWestExit = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Exit up_exit = 11;
 * @return {?proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.prototype.getUpExit = function() {
  return /** @type{?proto.room.v1.Room.Exit} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Room.Exit, 11));
};


/**
 * @param {?proto.room.v1.Room.Exit|undefined} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setUpExit = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearUpExit = function() {
  return this.setUpExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.prototype.hasUpExit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Exit down_exit = 12;
 * @return {?proto.room.v1.Room.Exit}
 */
proto.room.v1.Room.prototype.getDownExit = function() {
  return /** @type{?proto.room.v1.Room.Exit} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Room.Exit, 12));
};


/**
 * @param {?proto.room.v1.Room.Exit|undefined} value
 * @return {!proto.room.v1.Room} returns this
*/
proto.room.v1.Room.prototype.setDownExit = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.Room} returns this
 */
proto.room.v1.Room.prototype.clearDownExit = function() {
  return this.setDownExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.Room.prototype.hasDownExit = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.Coordinates.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.Coordinates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.Coordinates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Coordinates.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    z: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.Coordinates}
 */
proto.room.v1.Coordinates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.Coordinates;
  return proto.room.v1.Coordinates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.Coordinates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.Coordinates}
 */
proto.room.v1.Coordinates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.Coordinates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.Coordinates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.Coordinates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Coordinates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.room.v1.Coordinates.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.room.v1.Coordinates} returns this
 */
proto.room.v1.Coordinates.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.room.v1.Coordinates.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.room.v1.Coordinates} returns this
 */
proto.room.v1.Coordinates.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 z = 3;
 * @return {number}
 */
proto.room.v1.Coordinates.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.room.v1.Coordinates} returns this
 */
proto.room.v1.Coordinates.prototype.setZ = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.UserCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.UserCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.UserCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.UserCredentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.UserCredentials}
 */
proto.room.v1.UserCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.UserCredentials;
  return proto.room.v1.UserCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.UserCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.UserCredentials}
 */
proto.room.v1.UserCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.UserCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.UserCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.UserCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.UserCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.room.v1.UserCredentials.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.UserCredentials} returns this
 */
proto.room.v1.UserCredentials.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.room.v1.UserCredentials.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.UserCredentials} returns this
 */
proto.room.v1.UserCredentials.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.room.v1.Location.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.room.v1.Item.toObject, includeInstance),
    npcsList: jspb.Message.toObjectList(msg.getNpcsList(),
    proto.room.v1.NPC.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.Location}
 */
proto.room.v1.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.Location;
  return proto.room.v1.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.Location}
 */
proto.room.v1.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.room.v1.Item;
      reader.readMessage(value,proto.room.v1.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 4:
      var value = new proto.room.v1.NPC;
      reader.readMessage(value,proto.room.v1.NPC.deserializeBinaryFromReader);
      msg.addNpcs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.room.v1.Item.serializeBinaryToWriter
    );
  }
  f = message.getNpcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.room.v1.NPC.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.room.v1.Location.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.Location} returns this
 */
proto.room.v1.Location.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.room.v1.Location.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.Location} returns this
 */
proto.room.v1.Location.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Item items = 3;
 * @return {!Array<!proto.room.v1.Item>}
 */
proto.room.v1.Location.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.room.v1.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.room.v1.Item, 3));
};


/**
 * @param {!Array<!proto.room.v1.Item>} value
 * @return {!proto.room.v1.Location} returns this
*/
proto.room.v1.Location.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.room.v1.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.room.v1.Item}
 */
proto.room.v1.Location.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.room.v1.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.room.v1.Location} returns this
 */
proto.room.v1.Location.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * repeated NPC npcs = 4;
 * @return {!Array<!proto.room.v1.NPC>}
 */
proto.room.v1.Location.prototype.getNpcsList = function() {
  return /** @type{!Array<!proto.room.v1.NPC>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.room.v1.NPC, 4));
};


/**
 * @param {!Array<!proto.room.v1.NPC>} value
 * @return {!proto.room.v1.Location} returns this
*/
proto.room.v1.Location.prototype.setNpcsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.room.v1.NPC=} opt_value
 * @param {number=} opt_index
 * @return {!proto.room.v1.NPC}
 */
proto.room.v1.Location.prototype.addNpcs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.room.v1.NPC, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.room.v1.Location} returns this
 */
proto.room.v1.Location.prototype.clearNpcsList = function() {
  return this.setNpcsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.GetRoomStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.GetRoomStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.GetRoomStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetRoomStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.GetRoomStateRequest}
 */
proto.room.v1.GetRoomStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.GetRoomStateRequest;
  return proto.room.v1.GetRoomStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.GetRoomStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.GetRoomStateRequest}
 */
proto.room.v1.GetRoomStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.GetRoomStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.GetRoomStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.GetRoomStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetRoomStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.room.v1.GetRoomStateRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.GetRoomStateRequest} returns this
 */
proto.room.v1.GetRoomStateRequest.prototype.setRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.GetRoomStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.GetRoomStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.GetRoomStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetRoomStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomState: (f = msg.getRoomState()) && proto.room.v1.RoomState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.GetRoomStateResponse}
 */
proto.room.v1.GetRoomStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.GetRoomStateResponse;
  return proto.room.v1.GetRoomStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.GetRoomStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.GetRoomStateResponse}
 */
proto.room.v1.GetRoomStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.room.v1.RoomState;
      reader.readMessage(value,proto.room.v1.RoomState.deserializeBinaryFromReader);
      msg.setRoomState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.GetRoomStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.GetRoomStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.GetRoomStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetRoomStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.room.v1.RoomState.serializeBinaryToWriter
    );
  }
};


/**
 * optional RoomState room_state = 1;
 * @return {?proto.room.v1.RoomState}
 */
proto.room.v1.GetRoomStateResponse.prototype.getRoomState = function() {
  return /** @type{?proto.room.v1.RoomState} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.RoomState, 1));
};


/**
 * @param {?proto.room.v1.RoomState|undefined} value
 * @return {!proto.room.v1.GetRoomStateResponse} returns this
*/
proto.room.v1.GetRoomStateResponse.prototype.setRoomState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.GetRoomStateResponse} returns this
 */
proto.room.v1.GetRoomStateResponse.prototype.clearRoomState = function() {
  return this.setRoomState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.GetRoomStateResponse.prototype.hasRoomState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.GetLocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.GetLocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.GetLocationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetLocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    coordinates: (f = msg.getCoordinates()) && proto.room.v1.Coordinates.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.GetLocationRequest}
 */
proto.room.v1.GetLocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.GetLocationRequest;
  return proto.room.v1.GetLocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.GetLocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.GetLocationRequest}
 */
proto.room.v1.GetLocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.room.v1.Coordinates;
      reader.readMessage(value,proto.room.v1.Coordinates.deserializeBinaryFromReader);
      msg.setCoordinates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.GetLocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.GetLocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.GetLocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetLocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoordinates();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.room.v1.Coordinates.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coordinates coordinates = 1;
 * @return {?proto.room.v1.Coordinates}
 */
proto.room.v1.GetLocationRequest.prototype.getCoordinates = function() {
  return /** @type{?proto.room.v1.Coordinates} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Coordinates, 1));
};


/**
 * @param {?proto.room.v1.Coordinates|undefined} value
 * @return {!proto.room.v1.GetLocationRequest} returns this
*/
proto.room.v1.GetLocationRequest.prototype.setCoordinates = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.GetLocationRequest} returns this
 */
proto.room.v1.GetLocationRequest.prototype.clearCoordinates = function() {
  return this.setCoordinates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.GetLocationRequest.prototype.hasCoordinates = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.GetLocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.GetLocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.GetLocationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetLocationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.room.v1.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.GetLocationResponse}
 */
proto.room.v1.GetLocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.GetLocationResponse;
  return proto.room.v1.GetLocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.GetLocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.GetLocationResponse}
 */
proto.room.v1.GetLocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.room.v1.Location;
      reader.readMessage(value,proto.room.v1.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.GetLocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.GetLocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.GetLocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.GetLocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.room.v1.Location.serializeBinaryToWriter
    );
  }
};


/**
 * optional Location location = 1;
 * @return {?proto.room.v1.Location}
 */
proto.room.v1.GetLocationResponse.prototype.getLocation = function() {
  return /** @type{?proto.room.v1.Location} */ (
    jspb.Message.getWrapperField(this, proto.room.v1.Location, 1));
};


/**
 * @param {?proto.room.v1.Location|undefined} value
 * @return {!proto.room.v1.GetLocationResponse} returns this
*/
proto.room.v1.GetLocationResponse.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.room.v1.GetLocationResponse} returns this
 */
proto.room.v1.GetLocationResponse.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.room.v1.GetLocationResponse.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.room.v1.RoomState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.RoomState.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.RoomState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.RoomState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.RoomState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.RoomState}
 */
proto.room.v1.RoomState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.RoomState;
  return proto.room.v1.RoomState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.RoomState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.RoomState}
 */
proto.room.v1.RoomState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.RoomState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.RoomState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.RoomState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.RoomState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.room.v1.RoomState.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.RoomState} returns this
 */
proto.room.v1.RoomState.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string players = 2;
 * @return {!Array<string>}
 */
proto.room.v1.RoomState.prototype.getPlayersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.room.v1.RoomState} returns this
 */
proto.room.v1.RoomState.prototype.setPlayersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.room.v1.RoomState} returns this
 */
proto.room.v1.RoomState.prototype.addPlayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.room.v1.RoomState} returns this
 */
proto.room.v1.RoomState.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.Item}
 */
proto.room.v1.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.Item;
  return proto.room.v1.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.Item}
 */
proto.room.v1.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.room.v1.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.Item} returns this
 */
proto.room.v1.Item.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.room.v1.NPC.prototype.toObject = function(opt_includeInstance) {
  return proto.room.v1.NPC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.room.v1.NPC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.NPC.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.room.v1.NPC}
 */
proto.room.v1.NPC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.room.v1.NPC;
  return proto.room.v1.NPC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.room.v1.NPC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.room.v1.NPC}
 */
proto.room.v1.NPC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.room.v1.NPC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.room.v1.NPC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.room.v1.NPC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.room.v1.NPC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.room.v1.NPC.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.room.v1.NPC} returns this
 */
proto.room.v1.NPC.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.room.v1.InterpType = {
  INTERP_TYPE_UNSPECIFIED: 0,
  INTERP_TYPE_LOGIN: 1,
  INTERP_TYPE_PLAYING: 2,
  INTERP_TYPE_BUILDING: 3
};

goog.object.extend(exports, proto.room.v1);
