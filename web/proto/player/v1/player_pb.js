// source: player/v1/player.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.player.v1.AbilityScoreBonus', null, global);
goog.exportSymbol('proto.player.v1.Admin', null, global);
goog.exportSymbol('proto.player.v1.Coordinates', null, global);
goog.exportSymbol('proto.player.v1.CreatePlayerRequest', null, global);
goog.exportSymbol('proto.player.v1.CreatePlayerResponse', null, global);
goog.exportSymbol('proto.player.v1.DeathSaves', null, global);
goog.exportSymbol('proto.player.v1.Equipment', null, global);
goog.exportSymbol('proto.player.v1.Feature', null, global);
goog.exportSymbol('proto.player.v1.GetPlayerRequest', null, global);
goog.exportSymbol('proto.player.v1.GetPlayerResponse', null, global);
goog.exportSymbol('proto.player.v1.InterpType', null, global);
goog.exportSymbol('proto.player.v1.Item', null, global);
goog.exportSymbol('proto.player.v1.Language', null, global);
goog.exportSymbol('proto.player.v1.LinkSocialAccountRequest', null, global);
goog.exportSymbol('proto.player.v1.LinkSocialAccountResponse', null, global);
goog.exportSymbol('proto.player.v1.ListPlayersRequest', null, global);
goog.exportSymbol('proto.player.v1.ListPlayersResponse', null, global);
goog.exportSymbol('proto.player.v1.Location', null, global);
goog.exportSymbol('proto.player.v1.MovePlayerRequest', null, global);
goog.exportSymbol('proto.player.v1.MovePlayerResponse', null, global);
goog.exportSymbol('proto.player.v1.NPC', null, global);
goog.exportSymbol('proto.player.v1.Player', null, global);
goog.exportSymbol('proto.player.v1.RacialTraits', null, global);
goog.exportSymbol('proto.player.v1.SavingThrow', null, global);
goog.exportSymbol('proto.player.v1.SetPlayerRequest', null, global);
goog.exportSymbol('proto.player.v1.SetPlayerResponse', null, global);
goog.exportSymbol('proto.player.v1.Skill', null, global);
goog.exportSymbol('proto.player.v1.SocialLoginRequest', null, global);
goog.exportSymbol('proto.player.v1.SocialLoginResponse', null, global);
goog.exportSymbol('proto.player.v1.SocialProvider', null, global);
goog.exportSymbol('proto.player.v1.SpecialAbility', null, global);
goog.exportSymbol('proto.player.v1.Spell', null, global);
goog.exportSymbol('proto.player.v1.UnlinkSocialAccountRequest', null, global);
goog.exportSymbol('proto.player.v1.UnlinkSocialAccountResponse', null, global);
goog.exportSymbol('proto.player.v1.UpdatePlayerRequest', null, global);
goog.exportSymbol('proto.player.v1.UpdatePlayerResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Coordinates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Coordinates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Coordinates.displayName = 'proto.player.v1.Coordinates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Player = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.v1.Player.repeatedFields_, null);
};
goog.inherits(proto.player.v1.Player, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Player.displayName = 'proto.player.v1.Player';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Admin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Admin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Admin.displayName = 'proto.player.v1.Admin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Skill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Skill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Skill.displayName = 'proto.player.v1.Skill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.SavingThrow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.SavingThrow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.SavingThrow.displayName = 'proto.player.v1.SavingThrow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Language = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Language, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Language.displayName = 'proto.player.v1.Language';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Equipment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Equipment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Equipment.displayName = 'proto.player.v1.Equipment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Feature.displayName = 'proto.player.v1.Feature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Spell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Spell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Spell.displayName = 'proto.player.v1.Spell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.SpecialAbility = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.SpecialAbility, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.SpecialAbility.displayName = 'proto.player.v1.SpecialAbility';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.AbilityScoreBonus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.AbilityScoreBonus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.AbilityScoreBonus.displayName = 'proto.player.v1.AbilityScoreBonus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.DeathSaves = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.DeathSaves, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.DeathSaves.displayName = 'proto.player.v1.DeathSaves';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.RacialTraits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.v1.RacialTraits.repeatedFields_, null);
};
goog.inherits(proto.player.v1.RacialTraits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.RacialTraits.displayName = 'proto.player.v1.RacialTraits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.v1.Location.repeatedFields_, null);
};
goog.inherits(proto.player.v1.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Location.displayName = 'proto.player.v1.Location';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.Item.displayName = 'proto.player.v1.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.NPC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.NPC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.NPC.displayName = 'proto.player.v1.NPC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.CreatePlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.CreatePlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.CreatePlayerRequest.displayName = 'proto.player.v1.CreatePlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.CreatePlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.CreatePlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.CreatePlayerResponse.displayName = 'proto.player.v1.CreatePlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.MovePlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.MovePlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.MovePlayerRequest.displayName = 'proto.player.v1.MovePlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.MovePlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.MovePlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.MovePlayerResponse.displayName = 'proto.player.v1.MovePlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.ListPlayersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.ListPlayersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.ListPlayersRequest.displayName = 'proto.player.v1.ListPlayersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.ListPlayersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.v1.ListPlayersResponse.repeatedFields_, null);
};
goog.inherits(proto.player.v1.ListPlayersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.ListPlayersResponse.displayName = 'proto.player.v1.ListPlayersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.GetPlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.GetPlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.GetPlayerRequest.displayName = 'proto.player.v1.GetPlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.GetPlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.GetPlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.GetPlayerResponse.displayName = 'proto.player.v1.GetPlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.SetPlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.SetPlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.SetPlayerRequest.displayName = 'proto.player.v1.SetPlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.SetPlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.SetPlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.SetPlayerResponse.displayName = 'proto.player.v1.SetPlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.UpdatePlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.UpdatePlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.UpdatePlayerRequest.displayName = 'proto.player.v1.UpdatePlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.UpdatePlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.UpdatePlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.UpdatePlayerResponse.displayName = 'proto.player.v1.UpdatePlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.SocialLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.SocialLoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.SocialLoginResponse.displayName = 'proto.player.v1.SocialLoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.SocialLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.SocialLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.SocialLoginRequest.displayName = 'proto.player.v1.SocialLoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.UnlinkSocialAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.UnlinkSocialAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.UnlinkSocialAccountRequest.displayName = 'proto.player.v1.UnlinkSocialAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.UnlinkSocialAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.UnlinkSocialAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.UnlinkSocialAccountResponse.displayName = 'proto.player.v1.UnlinkSocialAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.LinkSocialAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.LinkSocialAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.LinkSocialAccountRequest.displayName = 'proto.player.v1.LinkSocialAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.v1.LinkSocialAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.v1.LinkSocialAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.v1.LinkSocialAccountResponse.displayName = 'proto.player.v1.LinkSocialAccountResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Coordinates.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Coordinates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Coordinates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Coordinates.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    z: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Coordinates}
 */
proto.player.v1.Coordinates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Coordinates;
  return proto.player.v1.Coordinates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Coordinates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Coordinates}
 */
proto.player.v1.Coordinates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Coordinates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Coordinates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Coordinates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Coordinates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.player.v1.Coordinates.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Coordinates} returns this
 */
proto.player.v1.Coordinates.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.player.v1.Coordinates.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Coordinates} returns this
 */
proto.player.v1.Coordinates.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 z = 3;
 * @return {number}
 */
proto.player.v1.Coordinates.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Coordinates} returns this
 */
proto.player.v1.Coordinates.prototype.setZ = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.v1.Player.repeatedFields_ = [20,21,22,23,24,25,33,34];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Player.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Player.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Player} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Player.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    discord: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    race: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pb_class: jspb.Message.getFieldWithDefault(msg, 5, ""),
    level: jspb.Message.getFieldWithDefault(msg, 6, 0),
    alignment: jspb.Message.getFieldWithDefault(msg, 7, ""),
    background: jspb.Message.getFieldWithDefault(msg, 8, ""),
    strength: jspb.Message.getFieldWithDefault(msg, 9, 0),
    dexterity: jspb.Message.getFieldWithDefault(msg, 10, 0),
    constitution: jspb.Message.getFieldWithDefault(msg, 11, 0),
    intelligence: jspb.Message.getFieldWithDefault(msg, 12, 0),
    wisdom: jspb.Message.getFieldWithDefault(msg, 13, 0),
    charisma: jspb.Message.getFieldWithDefault(msg, 14, 0),
    hitpoints: jspb.Message.getFieldWithDefault(msg, 15, 0),
    temporaryhitpoints: jspb.Message.getFieldWithDefault(msg, 16, 0),
    maxhitpoints: jspb.Message.getFieldWithDefault(msg, 17, 0),
    armorclass: jspb.Message.getFieldWithDefault(msg, 18, 0),
    proficiencybonus: jspb.Message.getFieldWithDefault(msg, 19, 0),
    skillsList: jspb.Message.toObjectList(msg.getSkillsList(),
    proto.player.v1.Skill.toObject, includeInstance),
    savingthrowsList: jspb.Message.toObjectList(msg.getSavingthrowsList(),
    proto.player.v1.SavingThrow.toObject, includeInstance),
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.player.v1.Language.toObject, includeInstance),
    equipmentList: jspb.Message.toObjectList(msg.getEquipmentList(),
    proto.player.v1.Equipment.toObject, includeInstance),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.player.v1.Feature.toObject, includeInstance),
    spellsList: jspb.Message.toObjectList(msg.getSpellsList(),
    proto.player.v1.Spell.toObject, includeInstance),
    spellslots: jspb.Message.getFieldWithDefault(msg, 26, 0),
    currentspellslots: jspb.Message.getFieldWithDefault(msg, 27, 0),
    experiencepoints: jspb.Message.getFieldWithDefault(msg, 28, 0),
    initiative: jspb.Message.getFieldWithDefault(msg, 29, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 30, 0),
    hitdice: jspb.Message.getFieldWithDefault(msg, 31, ""),
    deathsaves: (f = msg.getDeathsaves()) && proto.player.v1.DeathSaves.toObject(includeInstance, f),
    abilityscorebonusesList: jspb.Message.toObjectList(msg.getAbilityscorebonusesList(),
    proto.player.v1.AbilityScoreBonus.toObject, includeInstance),
    specialabilitiesList: jspb.Message.toObjectList(msg.getSpecialabilitiesList(),
    proto.player.v1.SpecialAbility.toObject, includeInstance),
    racialtraits: (f = msg.getRacialtraits()) && proto.player.v1.RacialTraits.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.player.v1.Coordinates.toObject(includeInstance, f),
    defaultroom: (f = msg.getDefaultroom()) && proto.player.v1.Coordinates.toObject(includeInstance, f),
    lastlogin: jspb.Message.getFieldWithDefault(msg, 38, ""),
    lastlogout: jspb.Message.getFieldWithDefault(msg, 39, ""),
    admin: (f = msg.getAdmin()) && proto.player.v1.Admin.toObject(includeInstance, f),
    socialProvider: jspb.Message.getFieldWithDefault(msg, 41, 0),
    socialId: jspb.Message.getFieldWithDefault(msg, 42, ""),
    socialToken: jspb.Message.getFieldWithDefault(msg, 43, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Player}
 */
proto.player.v1.Player.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Player;
  return proto.player.v1.Player.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Player} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Player}
 */
proto.player.v1.Player.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiscord(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRace(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setClass(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlignment(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackground(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStrength(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDexterity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConstitution(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntelligence(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWisdom(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharisma(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHitpoints(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemporaryhitpoints(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxhitpoints(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setArmorclass(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProficiencybonus(value);
      break;
    case 20:
      var value = new proto.player.v1.Skill;
      reader.readMessage(value,proto.player.v1.Skill.deserializeBinaryFromReader);
      msg.addSkills(value);
      break;
    case 21:
      var value = new proto.player.v1.SavingThrow;
      reader.readMessage(value,proto.player.v1.SavingThrow.deserializeBinaryFromReader);
      msg.addSavingthrows(value);
      break;
    case 22:
      var value = new proto.player.v1.Language;
      reader.readMessage(value,proto.player.v1.Language.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    case 23:
      var value = new proto.player.v1.Equipment;
      reader.readMessage(value,proto.player.v1.Equipment.deserializeBinaryFromReader);
      msg.addEquipment(value);
      break;
    case 24:
      var value = new proto.player.v1.Feature;
      reader.readMessage(value,proto.player.v1.Feature.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 25:
      var value = new proto.player.v1.Spell;
      reader.readMessage(value,proto.player.v1.Spell.deserializeBinaryFromReader);
      msg.addSpells(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpellslots(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentspellslots(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExperiencepoints(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInitiative(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setHitdice(value);
      break;
    case 32:
      var value = new proto.player.v1.DeathSaves;
      reader.readMessage(value,proto.player.v1.DeathSaves.deserializeBinaryFromReader);
      msg.setDeathsaves(value);
      break;
    case 33:
      var value = new proto.player.v1.AbilityScoreBonus;
      reader.readMessage(value,proto.player.v1.AbilityScoreBonus.deserializeBinaryFromReader);
      msg.addAbilityscorebonuses(value);
      break;
    case 34:
      var value = new proto.player.v1.SpecialAbility;
      reader.readMessage(value,proto.player.v1.SpecialAbility.deserializeBinaryFromReader);
      msg.addSpecialabilities(value);
      break;
    case 35:
      var value = new proto.player.v1.RacialTraits;
      reader.readMessage(value,proto.player.v1.RacialTraits.deserializeBinaryFromReader);
      msg.setRacialtraits(value);
      break;
    case 36:
      var value = new proto.player.v1.Coordinates;
      reader.readMessage(value,proto.player.v1.Coordinates.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 37:
      var value = new proto.player.v1.Coordinates;
      reader.readMessage(value,proto.player.v1.Coordinates.deserializeBinaryFromReader);
      msg.setDefaultroom(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastlogin(value);
      break;
    case 39:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastlogout(value);
      break;
    case 40:
      var value = new proto.player.v1.Admin;
      reader.readMessage(value,proto.player.v1.Admin.deserializeBinaryFromReader);
      msg.setAdmin(value);
      break;
    case 41:
      var value = /** @type {!proto.player.v1.SocialProvider} */ (reader.readEnum());
      msg.setSocialProvider(value);
      break;
    case 42:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocialId(value);
      break;
    case 43:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocialToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Player.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Player.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Player} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Player.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDiscord();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClass();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAlignment();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBackground();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStrength();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getDexterity();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getConstitution();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getIntelligence();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getWisdom();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getCharisma();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getHitpoints();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getTemporaryhitpoints();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMaxhitpoints();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getArmorclass();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getProficiencybonus();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getSkillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.player.v1.Skill.serializeBinaryToWriter
    );
  }
  f = message.getSavingthrowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.player.v1.SavingThrow.serializeBinaryToWriter
    );
  }
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.player.v1.Language.serializeBinaryToWriter
    );
  }
  f = message.getEquipmentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      proto.player.v1.Equipment.serializeBinaryToWriter
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      24,
      f,
      proto.player.v1.Feature.serializeBinaryToWriter
    );
  }
  f = message.getSpellsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      25,
      f,
      proto.player.v1.Spell.serializeBinaryToWriter
    );
  }
  f = message.getSpellslots();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getCurrentspellslots();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = message.getExperiencepoints();
  if (f !== 0) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = message.getInitiative();
  if (f !== 0) {
    writer.writeInt32(
      29,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = message.getHitdice();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getDeathsaves();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.player.v1.DeathSaves.serializeBinaryToWriter
    );
  }
  f = message.getAbilityscorebonusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      33,
      f,
      proto.player.v1.AbilityScoreBonus.serializeBinaryToWriter
    );
  }
  f = message.getSpecialabilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      34,
      f,
      proto.player.v1.SpecialAbility.serializeBinaryToWriter
    );
  }
  f = message.getRacialtraits();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.player.v1.RacialTraits.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.player.v1.Coordinates.serializeBinaryToWriter
    );
  }
  f = message.getDefaultroom();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.player.v1.Coordinates.serializeBinaryToWriter
    );
  }
  f = message.getLastlogin();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
  f = message.getLastlogout();
  if (f.length > 0) {
    writer.writeString(
      39,
      f
    );
  }
  f = message.getAdmin();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.player.v1.Admin.serializeBinaryToWriter
    );
  }
  f = message.getSocialProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      41,
      f
    );
  }
  f = message.getSocialId();
  if (f.length > 0) {
    writer.writeString(
      42,
      f
    );
  }
  f = message.getSocialToken();
  if (f.length > 0) {
    writer.writeString(
      43,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.player.v1.Player.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string discord = 2;
 * @return {string}
 */
proto.player.v1.Player.prototype.getDiscord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setDiscord = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.player.v1.Player.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string race = 4;
 * @return {string}
 */
proto.player.v1.Player.prototype.getRace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setRace = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string class = 5;
 * @return {string}
 */
proto.player.v1.Player.prototype.getClass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setClass = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 level = 6;
 * @return {number}
 */
proto.player.v1.Player.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string alignment = 7;
 * @return {string}
 */
proto.player.v1.Player.prototype.getAlignment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setAlignment = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string background = 8;
 * @return {string}
 */
proto.player.v1.Player.prototype.getBackground = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setBackground = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 strength = 9;
 * @return {number}
 */
proto.player.v1.Player.prototype.getStrength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setStrength = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 dexterity = 10;
 * @return {number}
 */
proto.player.v1.Player.prototype.getDexterity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setDexterity = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 constitution = 11;
 * @return {number}
 */
proto.player.v1.Player.prototype.getConstitution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setConstitution = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 intelligence = 12;
 * @return {number}
 */
proto.player.v1.Player.prototype.getIntelligence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setIntelligence = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 wisdom = 13;
 * @return {number}
 */
proto.player.v1.Player.prototype.getWisdom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setWisdom = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 charisma = 14;
 * @return {number}
 */
proto.player.v1.Player.prototype.getCharisma = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setCharisma = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 hitPoints = 15;
 * @return {number}
 */
proto.player.v1.Player.prototype.getHitpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setHitpoints = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 temporaryHitPoints = 16;
 * @return {number}
 */
proto.player.v1.Player.prototype.getTemporaryhitpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setTemporaryhitpoints = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 maxHitPoints = 17;
 * @return {number}
 */
proto.player.v1.Player.prototype.getMaxhitpoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setMaxhitpoints = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 armorClass = 18;
 * @return {number}
 */
proto.player.v1.Player.prototype.getArmorclass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setArmorclass = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 proficiencyBonus = 19;
 * @return {number}
 */
proto.player.v1.Player.prototype.getProficiencybonus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setProficiencybonus = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * repeated Skill skills = 20;
 * @return {!Array<!proto.player.v1.Skill>}
 */
proto.player.v1.Player.prototype.getSkillsList = function() {
  return /** @type{!Array<!proto.player.v1.Skill>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Skill, 20));
};


/**
 * @param {!Array<!proto.player.v1.Skill>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setSkillsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.player.v1.Skill=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Skill}
 */
proto.player.v1.Player.prototype.addSkills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.player.v1.Skill, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearSkillsList = function() {
  return this.setSkillsList([]);
};


/**
 * repeated SavingThrow savingThrows = 21;
 * @return {!Array<!proto.player.v1.SavingThrow>}
 */
proto.player.v1.Player.prototype.getSavingthrowsList = function() {
  return /** @type{!Array<!proto.player.v1.SavingThrow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.SavingThrow, 21));
};


/**
 * @param {!Array<!proto.player.v1.SavingThrow>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setSavingthrowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.player.v1.SavingThrow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.SavingThrow}
 */
proto.player.v1.Player.prototype.addSavingthrows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.player.v1.SavingThrow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearSavingthrowsList = function() {
  return this.setSavingthrowsList([]);
};


/**
 * repeated Language languages = 22;
 * @return {!Array<!proto.player.v1.Language>}
 */
proto.player.v1.Player.prototype.getLanguagesList = function() {
  return /** @type{!Array<!proto.player.v1.Language>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Language, 22));
};


/**
 * @param {!Array<!proto.player.v1.Language>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setLanguagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.player.v1.Language=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Language}
 */
proto.player.v1.Player.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.player.v1.Language, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearLanguagesList = function() {
  return this.setLanguagesList([]);
};


/**
 * repeated Equipment equipment = 23;
 * @return {!Array<!proto.player.v1.Equipment>}
 */
proto.player.v1.Player.prototype.getEquipmentList = function() {
  return /** @type{!Array<!proto.player.v1.Equipment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Equipment, 23));
};


/**
 * @param {!Array<!proto.player.v1.Equipment>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setEquipmentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.player.v1.Equipment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Equipment}
 */
proto.player.v1.Player.prototype.addEquipment = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.player.v1.Equipment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearEquipmentList = function() {
  return this.setEquipmentList([]);
};


/**
 * repeated Feature features = 24;
 * @return {!Array<!proto.player.v1.Feature>}
 */
proto.player.v1.Player.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.player.v1.Feature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Feature, 24));
};


/**
 * @param {!Array<!proto.player.v1.Feature>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 24, value);
};


/**
 * @param {!proto.player.v1.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Feature}
 */
proto.player.v1.Player.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 24, opt_value, proto.player.v1.Feature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * repeated Spell spells = 25;
 * @return {!Array<!proto.player.v1.Spell>}
 */
proto.player.v1.Player.prototype.getSpellsList = function() {
  return /** @type{!Array<!proto.player.v1.Spell>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Spell, 25));
};


/**
 * @param {!Array<!proto.player.v1.Spell>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setSpellsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 25, value);
};


/**
 * @param {!proto.player.v1.Spell=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Spell}
 */
proto.player.v1.Player.prototype.addSpells = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 25, opt_value, proto.player.v1.Spell, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearSpellsList = function() {
  return this.setSpellsList([]);
};


/**
 * optional int32 spellSlots = 26;
 * @return {number}
 */
proto.player.v1.Player.prototype.getSpellslots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setSpellslots = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional int32 currentSpellSlots = 27;
 * @return {number}
 */
proto.player.v1.Player.prototype.getCurrentspellslots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setCurrentspellslots = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional int32 experiencePoints = 28;
 * @return {number}
 */
proto.player.v1.Player.prototype.getExperiencepoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setExperiencepoints = function(value) {
  return jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * optional int32 initiative = 29;
 * @return {number}
 */
proto.player.v1.Player.prototype.getInitiative = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setInitiative = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional int32 speed = 30;
 * @return {number}
 */
proto.player.v1.Player.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 30, value);
};


/**
 * optional string hitDice = 31;
 * @return {string}
 */
proto.player.v1.Player.prototype.getHitdice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setHitdice = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional DeathSaves deathSaves = 32;
 * @return {?proto.player.v1.DeathSaves}
 */
proto.player.v1.Player.prototype.getDeathsaves = function() {
  return /** @type{?proto.player.v1.DeathSaves} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.DeathSaves, 32));
};


/**
 * @param {?proto.player.v1.DeathSaves|undefined} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setDeathsaves = function(value) {
  return jspb.Message.setWrapperField(this, 32, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearDeathsaves = function() {
  return this.setDeathsaves(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.Player.prototype.hasDeathsaves = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * repeated AbilityScoreBonus abilityScoreBonuses = 33;
 * @return {!Array<!proto.player.v1.AbilityScoreBonus>}
 */
proto.player.v1.Player.prototype.getAbilityscorebonusesList = function() {
  return /** @type{!Array<!proto.player.v1.AbilityScoreBonus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.AbilityScoreBonus, 33));
};


/**
 * @param {!Array<!proto.player.v1.AbilityScoreBonus>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setAbilityscorebonusesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.player.v1.AbilityScoreBonus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.AbilityScoreBonus}
 */
proto.player.v1.Player.prototype.addAbilityscorebonuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.player.v1.AbilityScoreBonus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearAbilityscorebonusesList = function() {
  return this.setAbilityscorebonusesList([]);
};


/**
 * repeated SpecialAbility specialAbilities = 34;
 * @return {!Array<!proto.player.v1.SpecialAbility>}
 */
proto.player.v1.Player.prototype.getSpecialabilitiesList = function() {
  return /** @type{!Array<!proto.player.v1.SpecialAbility>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.SpecialAbility, 34));
};


/**
 * @param {!Array<!proto.player.v1.SpecialAbility>} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setSpecialabilitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 34, value);
};


/**
 * @param {!proto.player.v1.SpecialAbility=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.SpecialAbility}
 */
proto.player.v1.Player.prototype.addSpecialabilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 34, opt_value, proto.player.v1.SpecialAbility, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearSpecialabilitiesList = function() {
  return this.setSpecialabilitiesList([]);
};


/**
 * optional RacialTraits racialTraits = 35;
 * @return {?proto.player.v1.RacialTraits}
 */
proto.player.v1.Player.prototype.getRacialtraits = function() {
  return /** @type{?proto.player.v1.RacialTraits} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.RacialTraits, 35));
};


/**
 * @param {?proto.player.v1.RacialTraits|undefined} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setRacialtraits = function(value) {
  return jspb.Message.setWrapperField(this, 35, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearRacialtraits = function() {
  return this.setRacialtraits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.Player.prototype.hasRacialtraits = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional Coordinates location = 36;
 * @return {?proto.player.v1.Coordinates}
 */
proto.player.v1.Player.prototype.getLocation = function() {
  return /** @type{?proto.player.v1.Coordinates} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Coordinates, 36));
};


/**
 * @param {?proto.player.v1.Coordinates|undefined} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.Player.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional Coordinates defaultRoom = 37;
 * @return {?proto.player.v1.Coordinates}
 */
proto.player.v1.Player.prototype.getDefaultroom = function() {
  return /** @type{?proto.player.v1.Coordinates} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Coordinates, 37));
};


/**
 * @param {?proto.player.v1.Coordinates|undefined} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setDefaultroom = function(value) {
  return jspb.Message.setWrapperField(this, 37, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearDefaultroom = function() {
  return this.setDefaultroom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.Player.prototype.hasDefaultroom = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional string LastLogin = 38;
 * @return {string}
 */
proto.player.v1.Player.prototype.getLastlogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setLastlogin = function(value) {
  return jspb.Message.setProto3StringField(this, 38, value);
};


/**
 * optional string LastLogout = 39;
 * @return {string}
 */
proto.player.v1.Player.prototype.getLastlogout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 39, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setLastlogout = function(value) {
  return jspb.Message.setProto3StringField(this, 39, value);
};


/**
 * optional Admin admin = 40;
 * @return {?proto.player.v1.Admin}
 */
proto.player.v1.Player.prototype.getAdmin = function() {
  return /** @type{?proto.player.v1.Admin} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Admin, 40));
};


/**
 * @param {?proto.player.v1.Admin|undefined} value
 * @return {!proto.player.v1.Player} returns this
*/
proto.player.v1.Player.prototype.setAdmin = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.clearAdmin = function() {
  return this.setAdmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.Player.prototype.hasAdmin = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional SocialProvider social_provider = 41;
 * @return {!proto.player.v1.SocialProvider}
 */
proto.player.v1.Player.prototype.getSocialProvider = function() {
  return /** @type {!proto.player.v1.SocialProvider} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {!proto.player.v1.SocialProvider} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setSocialProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 41, value);
};


/**
 * optional string social_id = 42;
 * @return {string}
 */
proto.player.v1.Player.prototype.getSocialId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 42, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setSocialId = function(value) {
  return jspb.Message.setProto3StringField(this, 42, value);
};


/**
 * optional string social_token = 43;
 * @return {string}
 */
proto.player.v1.Player.prototype.getSocialToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 43, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Player} returns this
 */
proto.player.v1.Player.prototype.setSocialToken = function(value) {
  return jspb.Message.setProto3StringField(this, 43, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Admin.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Admin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Admin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Admin.toObject = function(includeInstance, msg) {
  var f, obj = {
    isadmin: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Admin}
 */
proto.player.v1.Admin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Admin;
  return proto.player.v1.Admin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Admin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Admin}
 */
proto.player.v1.Admin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsadmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Admin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Admin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Admin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Admin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsadmin();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isAdmin = 1;
 * @return {boolean}
 */
proto.player.v1.Admin.prototype.getIsadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.player.v1.Admin} returns this
 */
proto.player.v1.Admin.prototype.setIsadmin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Skill.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Skill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Skill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Skill.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Skill}
 */
proto.player.v1.Skill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Skill;
  return proto.player.v1.Skill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Skill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Skill}
 */
proto.player.v1.Skill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Skill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Skill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Skill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Skill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.Skill.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Skill} returns this
 */
proto.player.v1.Skill.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.SavingThrow.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.SavingThrow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.SavingThrow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SavingThrow.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.SavingThrow}
 */
proto.player.v1.SavingThrow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.SavingThrow;
  return proto.player.v1.SavingThrow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.SavingThrow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.SavingThrow}
 */
proto.player.v1.SavingThrow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.SavingThrow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.SavingThrow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.SavingThrow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SavingThrow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.SavingThrow.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.SavingThrow} returns this
 */
proto.player.v1.SavingThrow.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Language.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Language.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Language} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Language.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Language}
 */
proto.player.v1.Language.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Language;
  return proto.player.v1.Language.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Language} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Language}
 */
proto.player.v1.Language.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Language.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Language.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Language} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Language.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.Language.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Language} returns this
 */
proto.player.v1.Language.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Equipment.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Equipment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Equipment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Equipment.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Equipment}
 */
proto.player.v1.Equipment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Equipment;
  return proto.player.v1.Equipment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Equipment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Equipment}
 */
proto.player.v1.Equipment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Equipment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Equipment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Equipment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Equipment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.Equipment.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Equipment} returns this
 */
proto.player.v1.Equipment.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Feature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Feature}
 */
proto.player.v1.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Feature;
  return proto.player.v1.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Feature}
 */
proto.player.v1.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.Feature.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Feature} returns this
 */
proto.player.v1.Feature.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Spell.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Spell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Spell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Spell.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Spell}
 */
proto.player.v1.Spell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Spell;
  return proto.player.v1.Spell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Spell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Spell}
 */
proto.player.v1.Spell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Spell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Spell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Spell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Spell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.Spell.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Spell} returns this
 */
proto.player.v1.Spell.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.SpecialAbility.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.SpecialAbility.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.SpecialAbility} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SpecialAbility.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.SpecialAbility}
 */
proto.player.v1.SpecialAbility.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.SpecialAbility;
  return proto.player.v1.SpecialAbility.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.SpecialAbility} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.SpecialAbility}
 */
proto.player.v1.SpecialAbility.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.SpecialAbility.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.SpecialAbility.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.SpecialAbility} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SpecialAbility.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.SpecialAbility.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.SpecialAbility} returns this
 */
proto.player.v1.SpecialAbility.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.AbilityScoreBonus.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.AbilityScoreBonus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.AbilityScoreBonus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.AbilityScoreBonus.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.AbilityScoreBonus}
 */
proto.player.v1.AbilityScoreBonus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.AbilityScoreBonus;
  return proto.player.v1.AbilityScoreBonus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.AbilityScoreBonus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.AbilityScoreBonus}
 */
proto.player.v1.AbilityScoreBonus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.AbilityScoreBonus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.AbilityScoreBonus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.AbilityScoreBonus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.AbilityScoreBonus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.AbilityScoreBonus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.AbilityScoreBonus} returns this
 */
proto.player.v1.AbilityScoreBonus.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.player.v1.AbilityScoreBonus.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.AbilityScoreBonus} returns this
 */
proto.player.v1.AbilityScoreBonus.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.DeathSaves.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.DeathSaves.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.DeathSaves} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.DeathSaves.toObject = function(includeInstance, msg) {
  var f, obj = {
    successes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    failures: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.DeathSaves}
 */
proto.player.v1.DeathSaves.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.DeathSaves;
  return proto.player.v1.DeathSaves.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.DeathSaves} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.DeathSaves}
 */
proto.player.v1.DeathSaves.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSuccesses(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFailures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.DeathSaves.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.DeathSaves.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.DeathSaves} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.DeathSaves.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccesses();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFailures();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 successes = 1;
 * @return {number}
 */
proto.player.v1.DeathSaves.prototype.getSuccesses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.DeathSaves} returns this
 */
proto.player.v1.DeathSaves.prototype.setSuccesses = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 failures = 2;
 * @return {number}
 */
proto.player.v1.DeathSaves.prototype.getFailures = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.DeathSaves} returns this
 */
proto.player.v1.DeathSaves.prototype.setFailures = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.v1.RacialTraits.repeatedFields_ = [6,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.RacialTraits.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.RacialTraits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.RacialTraits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.RacialTraits.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    darkvision: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, ""),
    speed: jspb.Message.getFieldWithDefault(msg, 5, 0),
    languagesList: jspb.Message.toObjectList(msg.getLanguagesList(),
    proto.player.v1.Language.toObject, includeInstance),
    abilityscorebonuses: jspb.Message.getFieldWithDefault(msg, 7, 0),
    specialabilitiesList: jspb.Message.toObjectList(msg.getSpecialabilitiesList(),
    proto.player.v1.SpecialAbility.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.RacialTraits}
 */
proto.player.v1.RacialTraits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.RacialTraits;
  return proto.player.v1.RacialTraits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.RacialTraits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.RacialTraits}
 */
proto.player.v1.RacialTraits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDarkvision(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    case 6:
      var value = new proto.player.v1.Language;
      reader.readMessage(value,proto.player.v1.Language.deserializeBinaryFromReader);
      msg.addLanguages(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAbilityscorebonuses(value);
      break;
    case 8:
      var value = new proto.player.v1.SpecialAbility;
      reader.readMessage(value,proto.player.v1.SpecialAbility.deserializeBinaryFromReader);
      msg.addSpecialabilities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.RacialTraits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.RacialTraits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.RacialTraits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.RacialTraits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDarkvision();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSize();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLanguagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.player.v1.Language.serializeBinaryToWriter
    );
  }
  f = message.getAbilityscorebonuses();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSpecialabilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.player.v1.SpecialAbility.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.RacialTraits.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.player.v1.RacialTraits.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 darkvision = 3;
 * @return {number}
 */
proto.player.v1.RacialTraits.prototype.getDarkvision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.setDarkvision = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string size = 4;
 * @return {string}
 */
proto.player.v1.RacialTraits.prototype.getSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.setSize = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 speed = 5;
 * @return {number}
 */
proto.player.v1.RacialTraits.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Language languages = 6;
 * @return {!Array<!proto.player.v1.Language>}
 */
proto.player.v1.RacialTraits.prototype.getLanguagesList = function() {
  return /** @type{!Array<!proto.player.v1.Language>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Language, 6));
};


/**
 * @param {!Array<!proto.player.v1.Language>} value
 * @return {!proto.player.v1.RacialTraits} returns this
*/
proto.player.v1.RacialTraits.prototype.setLanguagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.player.v1.Language=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Language}
 */
proto.player.v1.RacialTraits.prototype.addLanguages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.player.v1.Language, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.clearLanguagesList = function() {
  return this.setLanguagesList([]);
};


/**
 * optional int32 abilityScoreBonuses = 7;
 * @return {number}
 */
proto.player.v1.RacialTraits.prototype.getAbilityscorebonuses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.setAbilityscorebonuses = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated SpecialAbility specialAbilities = 8;
 * @return {!Array<!proto.player.v1.SpecialAbility>}
 */
proto.player.v1.RacialTraits.prototype.getSpecialabilitiesList = function() {
  return /** @type{!Array<!proto.player.v1.SpecialAbility>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.SpecialAbility, 8));
};


/**
 * @param {!Array<!proto.player.v1.SpecialAbility>} value
 * @return {!proto.player.v1.RacialTraits} returns this
*/
proto.player.v1.RacialTraits.prototype.setSpecialabilitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.player.v1.SpecialAbility=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.SpecialAbility}
 */
proto.player.v1.RacialTraits.prototype.addSpecialabilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.player.v1.SpecialAbility, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.RacialTraits} returns this
 */
proto.player.v1.RacialTraits.prototype.clearSpecialabilitiesList = function() {
  return this.setSpecialabilitiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.v1.Location.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.player.v1.Item.toObject, includeInstance),
    npcsList: jspb.Message.toObjectList(msg.getNpcsList(),
    proto.player.v1.NPC.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Location}
 */
proto.player.v1.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Location;
  return proto.player.v1.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Location}
 */
proto.player.v1.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.player.v1.Item;
      reader.readMessage(value,proto.player.v1.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 4:
      var value = new proto.player.v1.NPC;
      reader.readMessage(value,proto.player.v1.NPC.deserializeBinaryFromReader);
      msg.addNpcs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.player.v1.Item.serializeBinaryToWriter
    );
  }
  f = message.getNpcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.player.v1.NPC.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.player.v1.Location.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Location} returns this
 */
proto.player.v1.Location.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.player.v1.Location.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Location} returns this
 */
proto.player.v1.Location.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Item items = 3;
 * @return {!Array<!proto.player.v1.Item>}
 */
proto.player.v1.Location.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.player.v1.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Item, 3));
};


/**
 * @param {!Array<!proto.player.v1.Item>} value
 * @return {!proto.player.v1.Location} returns this
*/
proto.player.v1.Location.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.player.v1.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Item}
 */
proto.player.v1.Location.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.player.v1.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Location} returns this
 */
proto.player.v1.Location.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * repeated NPC npcs = 4;
 * @return {!Array<!proto.player.v1.NPC>}
 */
proto.player.v1.Location.prototype.getNpcsList = function() {
  return /** @type{!Array<!proto.player.v1.NPC>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.NPC, 4));
};


/**
 * @param {!Array<!proto.player.v1.NPC>} value
 * @return {!proto.player.v1.Location} returns this
*/
proto.player.v1.Location.prototype.setNpcsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.player.v1.NPC=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.NPC}
 */
proto.player.v1.Location.prototype.addNpcs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.player.v1.NPC, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.Location} returns this
 */
proto.player.v1.Location.prototype.clearNpcsList = function() {
  return this.setNpcsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.Item}
 */
proto.player.v1.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.Item;
  return proto.player.v1.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.Item}
 */
proto.player.v1.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.Item} returns this
 */
proto.player.v1.Item.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.NPC.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.NPC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.NPC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.NPC.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.NPC}
 */
proto.player.v1.NPC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.NPC;
  return proto.player.v1.NPC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.NPC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.NPC}
 */
proto.player.v1.NPC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.NPC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.NPC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.NPC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.NPC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.v1.NPC.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.NPC} returns this
 */
proto.player.v1.NPC.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.CreatePlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.CreatePlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.CreatePlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.CreatePlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.CreatePlayerRequest}
 */
proto.player.v1.CreatePlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.CreatePlayerRequest;
  return proto.player.v1.CreatePlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.CreatePlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.CreatePlayerRequest}
 */
proto.player.v1.CreatePlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.CreatePlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.CreatePlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.CreatePlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.CreatePlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.CreatePlayerRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.CreatePlayerRequest} returns this
 */
proto.player.v1.CreatePlayerRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Player player = 2;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.CreatePlayerRequest.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 2));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.CreatePlayerRequest} returns this
*/
proto.player.v1.CreatePlayerRequest.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.CreatePlayerRequest} returns this
 */
proto.player.v1.CreatePlayerRequest.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.CreatePlayerRequest.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.CreatePlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.CreatePlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.CreatePlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.CreatePlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.CreatePlayerResponse}
 */
proto.player.v1.CreatePlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.CreatePlayerResponse;
  return proto.player.v1.CreatePlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.CreatePlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.CreatePlayerResponse}
 */
proto.player.v1.CreatePlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.CreatePlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.CreatePlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.CreatePlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.CreatePlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.CreatePlayerResponse.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 1));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.CreatePlayerResponse} returns this
*/
proto.player.v1.CreatePlayerResponse.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.CreatePlayerResponse} returns this
 */
proto.player.v1.CreatePlayerResponse.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.CreatePlayerResponse.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.MovePlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.MovePlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.MovePlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.MovePlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newLocation: (f = msg.getNewLocation()) && proto.player.v1.Coordinates.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.MovePlayerRequest}
 */
proto.player.v1.MovePlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.MovePlayerRequest;
  return proto.player.v1.MovePlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.MovePlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.MovePlayerRequest}
 */
proto.player.v1.MovePlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.player.v1.Coordinates;
      reader.readMessage(value,proto.player.v1.Coordinates.deserializeBinaryFromReader);
      msg.setNewLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.MovePlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.MovePlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.MovePlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.MovePlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.v1.Coordinates.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.MovePlayerRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.MovePlayerRequest} returns this
 */
proto.player.v1.MovePlayerRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Coordinates new_location = 2;
 * @return {?proto.player.v1.Coordinates}
 */
proto.player.v1.MovePlayerRequest.prototype.getNewLocation = function() {
  return /** @type{?proto.player.v1.Coordinates} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Coordinates, 2));
};


/**
 * @param {?proto.player.v1.Coordinates|undefined} value
 * @return {!proto.player.v1.MovePlayerRequest} returns this
*/
proto.player.v1.MovePlayerRequest.prototype.setNewLocation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.MovePlayerRequest} returns this
 */
proto.player.v1.MovePlayerRequest.prototype.clearNewLocation = function() {
  return this.setNewLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.MovePlayerRequest.prototype.hasNewLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.MovePlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.MovePlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.MovePlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.MovePlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.MovePlayerResponse}
 */
proto.player.v1.MovePlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.MovePlayerResponse;
  return proto.player.v1.MovePlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.MovePlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.MovePlayerResponse}
 */
proto.player.v1.MovePlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.MovePlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.MovePlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.MovePlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.MovePlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.MovePlayerResponse.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 1));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.MovePlayerResponse} returns this
*/
proto.player.v1.MovePlayerResponse.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.MovePlayerResponse} returns this
 */
proto.player.v1.MovePlayerResponse.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.MovePlayerResponse.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.ListPlayersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.ListPlayersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.ListPlayersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.ListPlayersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.ListPlayersRequest}
 */
proto.player.v1.ListPlayersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.ListPlayersRequest;
  return proto.player.v1.ListPlayersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.ListPlayersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.ListPlayersRequest}
 */
proto.player.v1.ListPlayersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.ListPlayersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.ListPlayersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.ListPlayersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.ListPlayersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.v1.ListPlayersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.ListPlayersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.ListPlayersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.ListPlayersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.ListPlayersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playersList: jspb.Message.toObjectList(msg.getPlayersList(),
    proto.player.v1.Player.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.ListPlayersResponse}
 */
proto.player.v1.ListPlayersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.ListPlayersResponse;
  return proto.player.v1.ListPlayersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.ListPlayersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.ListPlayersResponse}
 */
proto.player.v1.ListPlayersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.ListPlayersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.ListPlayersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.ListPlayersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.ListPlayersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Player players = 1;
 * @return {!Array<!proto.player.v1.Player>}
 */
proto.player.v1.ListPlayersResponse.prototype.getPlayersList = function() {
  return /** @type{!Array<!proto.player.v1.Player>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.v1.Player, 1));
};


/**
 * @param {!Array<!proto.player.v1.Player>} value
 * @return {!proto.player.v1.ListPlayersResponse} returns this
*/
proto.player.v1.ListPlayersResponse.prototype.setPlayersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.player.v1.Player=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.v1.Player}
 */
proto.player.v1.ListPlayersResponse.prototype.addPlayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.player.v1.Player, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.v1.ListPlayersResponse} returns this
 */
proto.player.v1.ListPlayersResponse.prototype.clearPlayersList = function() {
  return this.setPlayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.GetPlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.GetPlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.GetPlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.GetPlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.GetPlayerRequest}
 */
proto.player.v1.GetPlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.GetPlayerRequest;
  return proto.player.v1.GetPlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.GetPlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.GetPlayerRequest}
 */
proto.player.v1.GetPlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.GetPlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.GetPlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.GetPlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.GetPlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string playerId = 1;
 * @return {string}
 */
proto.player.v1.GetPlayerRequest.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.GetPlayerRequest} returns this
 */
proto.player.v1.GetPlayerRequest.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.GetPlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.GetPlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.GetPlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.GetPlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.GetPlayerResponse}
 */
proto.player.v1.GetPlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.GetPlayerResponse;
  return proto.player.v1.GetPlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.GetPlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.GetPlayerResponse}
 */
proto.player.v1.GetPlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.GetPlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.GetPlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.GetPlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.GetPlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.GetPlayerResponse.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 1));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.GetPlayerResponse} returns this
*/
proto.player.v1.GetPlayerResponse.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.GetPlayerResponse} returns this
 */
proto.player.v1.GetPlayerResponse.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.GetPlayerResponse.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.SetPlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.SetPlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.SetPlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SetPlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.SetPlayerRequest}
 */
proto.player.v1.SetPlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.SetPlayerRequest;
  return proto.player.v1.SetPlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.SetPlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.SetPlayerRequest}
 */
proto.player.v1.SetPlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.SetPlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.SetPlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.SetPlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SetPlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.SetPlayerRequest.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 1));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.SetPlayerRequest} returns this
*/
proto.player.v1.SetPlayerRequest.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.SetPlayerRequest} returns this
 */
proto.player.v1.SetPlayerRequest.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.SetPlayerRequest.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.SetPlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.SetPlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.SetPlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SetPlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.SetPlayerResponse}
 */
proto.player.v1.SetPlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.SetPlayerResponse;
  return proto.player.v1.SetPlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.SetPlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.SetPlayerResponse}
 */
proto.player.v1.SetPlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.SetPlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.SetPlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.SetPlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SetPlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.SetPlayerResponse.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 1));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.SetPlayerResponse} returns this
*/
proto.player.v1.SetPlayerResponse.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.SetPlayerResponse} returns this
 */
proto.player.v1.SetPlayerResponse.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.SetPlayerResponse.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.UpdatePlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.UpdatePlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.UpdatePlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UpdatePlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.UpdatePlayerRequest}
 */
proto.player.v1.UpdatePlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.UpdatePlayerRequest;
  return proto.player.v1.UpdatePlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.UpdatePlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.UpdatePlayerRequest}
 */
proto.player.v1.UpdatePlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.UpdatePlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.UpdatePlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.UpdatePlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UpdatePlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.UpdatePlayerRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.UpdatePlayerRequest} returns this
 */
proto.player.v1.UpdatePlayerRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Player player = 2;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.UpdatePlayerRequest.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 2));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.UpdatePlayerRequest} returns this
*/
proto.player.v1.UpdatePlayerRequest.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.UpdatePlayerRequest} returns this
 */
proto.player.v1.UpdatePlayerRequest.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.UpdatePlayerRequest.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.UpdatePlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.UpdatePlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.UpdatePlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UpdatePlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.player.v1.Player.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.UpdatePlayerResponse}
 */
proto.player.v1.UpdatePlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.UpdatePlayerResponse;
  return proto.player.v1.UpdatePlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.UpdatePlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.UpdatePlayerResponse}
 */
proto.player.v1.UpdatePlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.v1.Player;
      reader.readMessage(value,proto.player.v1.Player.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.UpdatePlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.UpdatePlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.UpdatePlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UpdatePlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.v1.Player.serializeBinaryToWriter
    );
  }
};


/**
 * optional Player player = 1;
 * @return {?proto.player.v1.Player}
 */
proto.player.v1.UpdatePlayerResponse.prototype.getPlayer = function() {
  return /** @type{?proto.player.v1.Player} */ (
    jspb.Message.getWrapperField(this, proto.player.v1.Player, 1));
};


/**
 * @param {?proto.player.v1.Player|undefined} value
 * @return {!proto.player.v1.UpdatePlayerResponse} returns this
*/
proto.player.v1.UpdatePlayerResponse.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.v1.UpdatePlayerResponse} returns this
 */
proto.player.v1.UpdatePlayerResponse.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.v1.UpdatePlayerResponse.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.SocialLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.SocialLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.SocialLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SocialLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.SocialLoginResponse}
 */
proto.player.v1.SocialLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.SocialLoginResponse;
  return proto.player.v1.SocialLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.SocialLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.SocialLoginResponse}
 */
proto.player.v1.SocialLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.SocialLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.SocialLoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.SocialLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SocialLoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.SocialLoginResponse.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.SocialLoginResponse} returns this
 */
proto.player.v1.SocialLoginResponse.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.player.v1.SocialLoginResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.SocialLoginResponse} returns this
 */
proto.player.v1.SocialLoginResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.SocialLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.SocialLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.SocialLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SocialLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, 0),
    socialId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.SocialLoginRequest}
 */
proto.player.v1.SocialLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.SocialLoginRequest;
  return proto.player.v1.SocialLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.SocialLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.SocialLoginRequest}
 */
proto.player.v1.SocialLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.player.v1.SocialProvider} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocialId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.SocialLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.SocialLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.SocialLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.SocialLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSocialId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional SocialProvider provider = 1;
 * @return {!proto.player.v1.SocialProvider}
 */
proto.player.v1.SocialLoginRequest.prototype.getProvider = function() {
  return /** @type {!proto.player.v1.SocialProvider} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.player.v1.SocialProvider} value
 * @return {!proto.player.v1.SocialLoginRequest} returns this
 */
proto.player.v1.SocialLoginRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string social_id = 2;
 * @return {string}
 */
proto.player.v1.SocialLoginRequest.prototype.getSocialId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.SocialLoginRequest} returns this
 */
proto.player.v1.SocialLoginRequest.prototype.setSocialId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.UnlinkSocialAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.UnlinkSocialAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.UnlinkSocialAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UnlinkSocialAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.UnlinkSocialAccountRequest}
 */
proto.player.v1.UnlinkSocialAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.UnlinkSocialAccountRequest;
  return proto.player.v1.UnlinkSocialAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.UnlinkSocialAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.UnlinkSocialAccountRequest}
 */
proto.player.v1.UnlinkSocialAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {!proto.player.v1.SocialProvider} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.UnlinkSocialAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.UnlinkSocialAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.UnlinkSocialAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UnlinkSocialAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.UnlinkSocialAccountRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.UnlinkSocialAccountRequest} returns this
 */
proto.player.v1.UnlinkSocialAccountRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SocialProvider provider = 2;
 * @return {!proto.player.v1.SocialProvider}
 */
proto.player.v1.UnlinkSocialAccountRequest.prototype.getProvider = function() {
  return /** @type {!proto.player.v1.SocialProvider} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.player.v1.SocialProvider} value
 * @return {!proto.player.v1.UnlinkSocialAccountRequest} returns this
 */
proto.player.v1.UnlinkSocialAccountRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.UnlinkSocialAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.UnlinkSocialAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.UnlinkSocialAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UnlinkSocialAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.UnlinkSocialAccountResponse}
 */
proto.player.v1.UnlinkSocialAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.UnlinkSocialAccountResponse;
  return proto.player.v1.UnlinkSocialAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.UnlinkSocialAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.UnlinkSocialAccountResponse}
 */
proto.player.v1.UnlinkSocialAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.UnlinkSocialAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.UnlinkSocialAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.UnlinkSocialAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.UnlinkSocialAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.UnlinkSocialAccountResponse.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.UnlinkSocialAccountResponse} returns this
 */
proto.player.v1.UnlinkSocialAccountResponse.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.LinkSocialAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.LinkSocialAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.LinkSocialAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.LinkSocialAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 2, 0),
    socialId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.LinkSocialAccountRequest}
 */
proto.player.v1.LinkSocialAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.LinkSocialAccountRequest;
  return proto.player.v1.LinkSocialAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.LinkSocialAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.LinkSocialAccountRequest}
 */
proto.player.v1.LinkSocialAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {!proto.player.v1.SocialProvider} */ (reader.readEnum());
      msg.setProvider(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSocialId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.LinkSocialAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.LinkSocialAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.LinkSocialAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.LinkSocialAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProvider();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSocialId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.LinkSocialAccountRequest.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.LinkSocialAccountRequest} returns this
 */
proto.player.v1.LinkSocialAccountRequest.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SocialProvider provider = 2;
 * @return {!proto.player.v1.SocialProvider}
 */
proto.player.v1.LinkSocialAccountRequest.prototype.getProvider = function() {
  return /** @type {!proto.player.v1.SocialProvider} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.player.v1.SocialProvider} value
 * @return {!proto.player.v1.LinkSocialAccountRequest} returns this
 */
proto.player.v1.LinkSocialAccountRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string social_id = 3;
 * @return {string}
 */
proto.player.v1.LinkSocialAccountRequest.prototype.getSocialId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.LinkSocialAccountRequest} returns this
 */
proto.player.v1.LinkSocialAccountRequest.prototype.setSocialId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.v1.LinkSocialAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.v1.LinkSocialAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.v1.LinkSocialAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.LinkSocialAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.v1.LinkSocialAccountResponse}
 */
proto.player.v1.LinkSocialAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.v1.LinkSocialAccountResponse;
  return proto.player.v1.LinkSocialAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.v1.LinkSocialAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.v1.LinkSocialAccountResponse}
 */
proto.player.v1.LinkSocialAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.v1.LinkSocialAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.v1.LinkSocialAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.v1.LinkSocialAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.v1.LinkSocialAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.player.v1.LinkSocialAccountResponse.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.v1.LinkSocialAccountResponse} returns this
 */
proto.player.v1.LinkSocialAccountResponse.prototype.setPlayerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.player.v1.InterpType = {
  INTERP_TYPE_UNSPECIFIED: 0,
  INTERP_TYPE_LOGIN: 1,
  INTERP_TYPE_PLAYING: 2,
  INTERP_TYPE_BUILDING: 3
};

/**
 * @enum {number}
 */
proto.player.v1.SocialProvider = {
  GOOGLE: 0,
  GITHUB: 1
};

goog.object.extend(exports, proto.player.v1);
