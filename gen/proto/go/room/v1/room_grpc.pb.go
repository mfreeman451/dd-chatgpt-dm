// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: room/v1/room.proto

package roomv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoomSvc_GetRoomState_FullMethodName = "/room.v1.RoomSvc/GetRoomState"
)

// RoomSvcClient is the client API for RoomSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomSvcClient interface {
	GetRoomState(ctx context.Context, in *GetRoomStateRequest, opts ...grpc.CallOption) (*GetRoomStateResponse, error)
}

type roomSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomSvcClient(cc grpc.ClientConnInterface) RoomSvcClient {
	return &roomSvcClient{cc}
}

func (c *roomSvcClient) GetRoomState(ctx context.Context, in *GetRoomStateRequest, opts ...grpc.CallOption) (*GetRoomStateResponse, error) {
	out := new(GetRoomStateResponse)
	err := c.cc.Invoke(ctx, RoomSvc_GetRoomState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomSvcServer is the server API for RoomSvc service.
// All implementations must embed UnimplementedRoomSvcServer
// for forward compatibility
type RoomSvcServer interface {
	GetRoomState(context.Context, *GetRoomStateRequest) (*GetRoomStateResponse, error)
	mustEmbedUnimplementedRoomSvcServer()
}

// UnimplementedRoomSvcServer must be embedded to have forward compatible implementations.
type UnimplementedRoomSvcServer struct {
}

func (UnimplementedRoomSvcServer) GetRoomState(context.Context, *GetRoomStateRequest) (*GetRoomStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomState not implemented")
}
func (UnimplementedRoomSvcServer) mustEmbedUnimplementedRoomSvcServer() {}

// UnsafeRoomSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomSvcServer will
// result in compilation errors.
type UnsafeRoomSvcServer interface {
	mustEmbedUnimplementedRoomSvcServer()
}

func RegisterRoomSvcServer(s grpc.ServiceRegistrar, srv RoomSvcServer) {
	s.RegisterService(&RoomSvc_ServiceDesc, srv)
}

func _RoomSvc_GetRoomState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomSvcServer).GetRoomState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomSvc_GetRoomState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomSvcServer).GetRoomState(ctx, req.(*GetRoomStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomSvc_ServiceDesc is the grpc.ServiceDesc for RoomSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "room.v1.RoomSvc",
	HandlerType: (*RoomSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoomState",
			Handler:    _RoomSvc_GetRoomState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room/v1/room.proto",
}
