// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: player/v1/player.proto

package playerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayerSvc_CreatePlayer_FullMethodName = "/player.v1.PlayerSvc/CreatePlayer"
	PlayerSvc_MovePlayer_FullMethodName   = "/player.v1.PlayerSvc/MovePlayer"
	PlayerSvc_ListPlayers_FullMethodName  = "/player.v1.PlayerSvc/ListPlayers"
	PlayerSvc_GetPlayer_FullMethodName    = "/player.v1.PlayerSvc/GetPlayer"
	PlayerSvc_SetPlayer_FullMethodName    = "/player.v1.PlayerSvc/SetPlayer"
	PlayerSvc_UpdatePlayer_FullMethodName = "/player.v1.PlayerSvc/UpdatePlayer"
)

// PlayerSvcClient is the client API for PlayerSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerSvcClient interface {
	CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*CreatePlayerResponse, error)
	MovePlayer(ctx context.Context, in *MovePlayerRequest, opts ...grpc.CallOption) (*MovePlayerResponse, error)
	ListPlayers(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*ListPlayersResponse, error)
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error)
	SetPlayer(ctx context.Context, in *SetPlayerRequest, opts ...grpc.CallOption) (*SetPlayerResponse, error)
	UpdatePlayer(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*UpdatePlayerResponse, error)
}

type playerSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerSvcClient(cc grpc.ClientConnInterface) PlayerSvcClient {
	return &playerSvcClient{cc}
}

func (c *playerSvcClient) CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*CreatePlayerResponse, error) {
	out := new(CreatePlayerResponse)
	err := c.cc.Invoke(ctx, PlayerSvc_CreatePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerSvcClient) MovePlayer(ctx context.Context, in *MovePlayerRequest, opts ...grpc.CallOption) (*MovePlayerResponse, error) {
	out := new(MovePlayerResponse)
	err := c.cc.Invoke(ctx, PlayerSvc_MovePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerSvcClient) ListPlayers(ctx context.Context, in *ListPlayersRequest, opts ...grpc.CallOption) (*ListPlayersResponse, error) {
	out := new(ListPlayersResponse)
	err := c.cc.Invoke(ctx, PlayerSvc_ListPlayers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerSvcClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error) {
	out := new(GetPlayerResponse)
	err := c.cc.Invoke(ctx, PlayerSvc_GetPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerSvcClient) SetPlayer(ctx context.Context, in *SetPlayerRequest, opts ...grpc.CallOption) (*SetPlayerResponse, error) {
	out := new(SetPlayerResponse)
	err := c.cc.Invoke(ctx, PlayerSvc_SetPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerSvcClient) UpdatePlayer(ctx context.Context, in *UpdatePlayerRequest, opts ...grpc.CallOption) (*UpdatePlayerResponse, error) {
	out := new(UpdatePlayerResponse)
	err := c.cc.Invoke(ctx, PlayerSvc_UpdatePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerSvcServer is the server API for PlayerSvc service.
// All implementations must embed UnimplementedPlayerSvcServer
// for forward compatibility
type PlayerSvcServer interface {
	CreatePlayer(context.Context, *CreatePlayerRequest) (*CreatePlayerResponse, error)
	MovePlayer(context.Context, *MovePlayerRequest) (*MovePlayerResponse, error)
	ListPlayers(context.Context, *ListPlayersRequest) (*ListPlayersResponse, error)
	GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error)
	SetPlayer(context.Context, *SetPlayerRequest) (*SetPlayerResponse, error)
	UpdatePlayer(context.Context, *UpdatePlayerRequest) (*UpdatePlayerResponse, error)
	mustEmbedUnimplementedPlayerSvcServer()
}

// UnimplementedPlayerSvcServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerSvcServer struct {
}

func (UnimplementedPlayerSvcServer) CreatePlayer(context.Context, *CreatePlayerRequest) (*CreatePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedPlayerSvcServer) MovePlayer(context.Context, *MovePlayerRequest) (*MovePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePlayer not implemented")
}
func (UnimplementedPlayerSvcServer) ListPlayers(context.Context, *ListPlayersRequest) (*ListPlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlayers not implemented")
}
func (UnimplementedPlayerSvcServer) GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedPlayerSvcServer) SetPlayer(context.Context, *SetPlayerRequest) (*SetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayer not implemented")
}
func (UnimplementedPlayerSvcServer) UpdatePlayer(context.Context, *UpdatePlayerRequest) (*UpdatePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayer not implemented")
}
func (UnimplementedPlayerSvcServer) mustEmbedUnimplementedPlayerSvcServer() {}

// UnsafePlayerSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerSvcServer will
// result in compilation errors.
type UnsafePlayerSvcServer interface {
	mustEmbedUnimplementedPlayerSvcServer()
}

func RegisterPlayerSvcServer(s grpc.ServiceRegistrar, srv PlayerSvcServer) {
	s.RegisterService(&PlayerSvc_ServiceDesc, srv)
}

func _PlayerSvc_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerSvcServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerSvc_CreatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerSvcServer).CreatePlayer(ctx, req.(*CreatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerSvc_MovePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerSvcServer).MovePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerSvc_MovePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerSvcServer).MovePlayer(ctx, req.(*MovePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerSvc_ListPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerSvcServer).ListPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerSvc_ListPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerSvcServer).ListPlayers(ctx, req.(*ListPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerSvc_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerSvcServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerSvc_GetPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerSvcServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerSvc_SetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerSvcServer).SetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerSvc_SetPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerSvcServer).SetPlayer(ctx, req.(*SetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerSvc_UpdatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerSvcServer).UpdatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerSvc_UpdatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerSvcServer).UpdatePlayer(ctx, req.(*UpdatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerSvc_ServiceDesc is the grpc.ServiceDesc for PlayerSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "player.v1.PlayerSvc",
	HandlerType: (*PlayerSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _PlayerSvc_CreatePlayer_Handler,
		},
		{
			MethodName: "MovePlayer",
			Handler:    _PlayerSvc_MovePlayer_Handler,
		},
		{
			MethodName: "ListPlayers",
			Handler:    _PlayerSvc_ListPlayers_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _PlayerSvc_GetPlayer_Handler,
		},
		{
			MethodName: "SetPlayer",
			Handler:    _PlayerSvc_SetPlayer_Handler,
		},
		{
			MethodName: "UpdatePlayer",
			Handler:    _PlayerSvc_UpdatePlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player/v1/player.proto",
}
