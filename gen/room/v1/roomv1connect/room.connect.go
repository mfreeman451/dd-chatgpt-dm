// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: room/v1/room.proto

package roomv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/mfreeman451/dd-chatgpt-dm/gen/room/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RoomSvcName is the fully-qualified name of the RoomSvc service.
	RoomSvcName = "room.v1.RoomSvc"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomSvcGetRoomStateProcedure is the fully-qualified name of the RoomSvc's GetRoomState RPC.
	RoomSvcGetRoomStateProcedure = "/room.v1.RoomSvc/GetRoomState"
)

// RoomSvcClient is a client for the room.v1.RoomSvc service.
type RoomSvcClient interface {
	GetRoomState(context.Context, *connect_go.Request[v1.GetRoomStateRequest]) (*connect_go.Response[v1.GetRoomStateResponse], error)
}

// NewRoomSvcClient constructs a client for the room.v1.RoomSvc service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomSvcClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RoomSvcClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roomSvcClient{
		getRoomState: connect_go.NewClient[v1.GetRoomStateRequest, v1.GetRoomStateResponse](
			httpClient,
			baseURL+RoomSvcGetRoomStateProcedure,
			opts...,
		),
	}
}

// roomSvcClient implements RoomSvcClient.
type roomSvcClient struct {
	getRoomState *connect_go.Client[v1.GetRoomStateRequest, v1.GetRoomStateResponse]
}

// GetRoomState calls room.v1.RoomSvc.GetRoomState.
func (c *roomSvcClient) GetRoomState(ctx context.Context, req *connect_go.Request[v1.GetRoomStateRequest]) (*connect_go.Response[v1.GetRoomStateResponse], error) {
	return c.getRoomState.CallUnary(ctx, req)
}

// RoomSvcHandler is an implementation of the room.v1.RoomSvc service.
type RoomSvcHandler interface {
	GetRoomState(context.Context, *connect_go.Request[v1.GetRoomStateRequest]) (*connect_go.Response[v1.GetRoomStateResponse], error)
}

// NewRoomSvcHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomSvcHandler(svc RoomSvcHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	roomSvcGetRoomStateHandler := connect_go.NewUnaryHandler(
		RoomSvcGetRoomStateProcedure,
		svc.GetRoomState,
		opts...,
	)
	return "/room.v1.RoomSvc/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomSvcGetRoomStateProcedure:
			roomSvcGetRoomStateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomSvcHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomSvcHandler struct{}

func (UnimplementedRoomSvcHandler) GetRoomState(context.Context, *connect_go.Request[v1.GetRoomStateRequest]) (*connect_go.Response[v1.GetRoomStateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("room.v1.RoomSvc.GetRoomState is not implemented"))
}
