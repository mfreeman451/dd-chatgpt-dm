// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: game/v1/game.proto

package gamev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/mfreeman451/dd-chatgpt-dm/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GameName is the fully-qualified name of the Game service.
	GameName = "game.v1.Game"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameExecuteCommandProcedure is the fully-qualified name of the Game's ExecuteCommand RPC.
	GameExecuteCommandProcedure = "/game.v1.Game/ExecuteCommand"
	// GameCreateGameProcedure is the fully-qualified name of the Game's CreateGame RPC.
	GameCreateGameProcedure = "/game.v1.Game/CreateGame"
	// GameStartGameProcedure is the fully-qualified name of the Game's StartGame RPC.
	GameStartGameProcedure = "/game.v1.Game/StartGame"
	// GameEndGameProcedure is the fully-qualified name of the Game's EndGame RPC.
	GameEndGameProcedure = "/game.v1.Game/EndGame"
)

// GameClient is a client for the game.v1.Game service.
type GameClient interface {
	// New methods for handling commands and events
	ExecuteCommand(context.Context, *connect_go.Request[v1.ExecuteCommandRequest]) (*connect_go.Response[v1.ExecuteCommandResponse], error)
	CreateGame(context.Context, *connect_go.Request[v1.CreateGameCommand]) (*connect_go.Response[v1.GameCreatedEvent], error)
	StartGame(context.Context, *connect_go.Request[v1.StartGameCommand]) (*connect_go.Response[v1.GameStartedEvent], error)
	EndGame(context.Context, *connect_go.Request[v1.EndGameCommand]) (*connect_go.Response[v1.GameEndedEvent], error)
}

// NewGameClient constructs a client for the game.v1.Game service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GameClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gameClient{
		executeCommand: connect_go.NewClient[v1.ExecuteCommandRequest, v1.ExecuteCommandResponse](
			httpClient,
			baseURL+GameExecuteCommandProcedure,
			opts...,
		),
		createGame: connect_go.NewClient[v1.CreateGameCommand, v1.GameCreatedEvent](
			httpClient,
			baseURL+GameCreateGameProcedure,
			opts...,
		),
		startGame: connect_go.NewClient[v1.StartGameCommand, v1.GameStartedEvent](
			httpClient,
			baseURL+GameStartGameProcedure,
			opts...,
		),
		endGame: connect_go.NewClient[v1.EndGameCommand, v1.GameEndedEvent](
			httpClient,
			baseURL+GameEndGameProcedure,
			opts...,
		),
	}
}

// gameClient implements GameClient.
type gameClient struct {
	executeCommand *connect_go.Client[v1.ExecuteCommandRequest, v1.ExecuteCommandResponse]
	createGame     *connect_go.Client[v1.CreateGameCommand, v1.GameCreatedEvent]
	startGame      *connect_go.Client[v1.StartGameCommand, v1.GameStartedEvent]
	endGame        *connect_go.Client[v1.EndGameCommand, v1.GameEndedEvent]
}

// ExecuteCommand calls game.v1.Game.ExecuteCommand.
func (c *gameClient) ExecuteCommand(ctx context.Context, req *connect_go.Request[v1.ExecuteCommandRequest]) (*connect_go.Response[v1.ExecuteCommandResponse], error) {
	return c.executeCommand.CallUnary(ctx, req)
}

// CreateGame calls game.v1.Game.CreateGame.
func (c *gameClient) CreateGame(ctx context.Context, req *connect_go.Request[v1.CreateGameCommand]) (*connect_go.Response[v1.GameCreatedEvent], error) {
	return c.createGame.CallUnary(ctx, req)
}

// StartGame calls game.v1.Game.StartGame.
func (c *gameClient) StartGame(ctx context.Context, req *connect_go.Request[v1.StartGameCommand]) (*connect_go.Response[v1.GameStartedEvent], error) {
	return c.startGame.CallUnary(ctx, req)
}

// EndGame calls game.v1.Game.EndGame.
func (c *gameClient) EndGame(ctx context.Context, req *connect_go.Request[v1.EndGameCommand]) (*connect_go.Response[v1.GameEndedEvent], error) {
	return c.endGame.CallUnary(ctx, req)
}

// GameHandler is an implementation of the game.v1.Game service.
type GameHandler interface {
	// New methods for handling commands and events
	ExecuteCommand(context.Context, *connect_go.Request[v1.ExecuteCommandRequest]) (*connect_go.Response[v1.ExecuteCommandResponse], error)
	CreateGame(context.Context, *connect_go.Request[v1.CreateGameCommand]) (*connect_go.Response[v1.GameCreatedEvent], error)
	StartGame(context.Context, *connect_go.Request[v1.StartGameCommand]) (*connect_go.Response[v1.GameStartedEvent], error)
	EndGame(context.Context, *connect_go.Request[v1.EndGameCommand]) (*connect_go.Response[v1.GameEndedEvent], error)
}

// NewGameHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameHandler(svc GameHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	gameExecuteCommandHandler := connect_go.NewUnaryHandler(
		GameExecuteCommandProcedure,
		svc.ExecuteCommand,
		opts...,
	)
	gameCreateGameHandler := connect_go.NewUnaryHandler(
		GameCreateGameProcedure,
		svc.CreateGame,
		opts...,
	)
	gameStartGameHandler := connect_go.NewUnaryHandler(
		GameStartGameProcedure,
		svc.StartGame,
		opts...,
	)
	gameEndGameHandler := connect_go.NewUnaryHandler(
		GameEndGameProcedure,
		svc.EndGame,
		opts...,
	)
	return "/game.v1.Game/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameExecuteCommandProcedure:
			gameExecuteCommandHandler.ServeHTTP(w, r)
		case GameCreateGameProcedure:
			gameCreateGameHandler.ServeHTTP(w, r)
		case GameStartGameProcedure:
			gameStartGameHandler.ServeHTTP(w, r)
		case GameEndGameProcedure:
			gameEndGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameHandler returns CodeUnimplemented from all methods.
type UnimplementedGameHandler struct{}

func (UnimplementedGameHandler) ExecuteCommand(context.Context, *connect_go.Request[v1.ExecuteCommandRequest]) (*connect_go.Response[v1.ExecuteCommandResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("game.v1.Game.ExecuteCommand is not implemented"))
}

func (UnimplementedGameHandler) CreateGame(context.Context, *connect_go.Request[v1.CreateGameCommand]) (*connect_go.Response[v1.GameCreatedEvent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("game.v1.Game.CreateGame is not implemented"))
}

func (UnimplementedGameHandler) StartGame(context.Context, *connect_go.Request[v1.StartGameCommand]) (*connect_go.Response[v1.GameStartedEvent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("game.v1.Game.StartGame is not implemented"))
}

func (UnimplementedGameHandler) EndGame(context.Context, *connect_go.Request[v1.EndGameCommand]) (*connect_go.Response[v1.GameEndedEvent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("game.v1.Game.EndGame is not implemented"))
}
