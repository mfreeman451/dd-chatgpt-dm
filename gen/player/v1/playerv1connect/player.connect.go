// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: player/v1/player.proto

package playerv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/mfreeman451/dd-chatgpt-dm/gen/player/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PlayerSvcName is the fully-qualified name of the PlayerSvc service.
	PlayerSvcName = "player.v1.PlayerSvc"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlayerSvcCreatePlayerProcedure is the fully-qualified name of the PlayerSvc's CreatePlayer RPC.
	PlayerSvcCreatePlayerProcedure = "/player.v1.PlayerSvc/CreatePlayer"
	// PlayerSvcMovePlayerProcedure is the fully-qualified name of the PlayerSvc's MovePlayer RPC.
	PlayerSvcMovePlayerProcedure = "/player.v1.PlayerSvc/MovePlayer"
	// PlayerSvcListPlayersProcedure is the fully-qualified name of the PlayerSvc's ListPlayers RPC.
	PlayerSvcListPlayersProcedure = "/player.v1.PlayerSvc/ListPlayers"
	// PlayerSvcGetPlayerProcedure is the fully-qualified name of the PlayerSvc's GetPlayer RPC.
	PlayerSvcGetPlayerProcedure = "/player.v1.PlayerSvc/GetPlayer"
	// PlayerSvcSetPlayerProcedure is the fully-qualified name of the PlayerSvc's SetPlayer RPC.
	PlayerSvcSetPlayerProcedure = "/player.v1.PlayerSvc/SetPlayer"
	// PlayerSvcUpdatePlayerProcedure is the fully-qualified name of the PlayerSvc's UpdatePlayer RPC.
	PlayerSvcUpdatePlayerProcedure = "/player.v1.PlayerSvc/UpdatePlayer"
)

// PlayerSvcClient is a client for the player.v1.PlayerSvc service.
type PlayerSvcClient interface {
	CreatePlayer(context.Context, *connect_go.Request[v1.CreatePlayerRequest]) (*connect_go.Response[v1.CreatePlayerResponse], error)
	MovePlayer(context.Context, *connect_go.Request[v1.MovePlayerRequest]) (*connect_go.Response[v1.MovePlayerResponse], error)
	ListPlayers(context.Context, *connect_go.Request[v1.ListPlayersRequest]) (*connect_go.Response[v1.ListPlayersResponse], error)
	GetPlayer(context.Context, *connect_go.Request[v1.GetPlayerRequest]) (*connect_go.Response[v1.GetPlayerResponse], error)
	SetPlayer(context.Context, *connect_go.Request[v1.SetPlayerRequest]) (*connect_go.Response[v1.SetPlayerResponse], error)
	UpdatePlayer(context.Context, *connect_go.Request[v1.UpdatePlayerRequest]) (*connect_go.Response[v1.UpdatePlayerResponse], error)
}

// NewPlayerSvcClient constructs a client for the player.v1.PlayerSvc service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlayerSvcClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PlayerSvcClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &playerSvcClient{
		createPlayer: connect_go.NewClient[v1.CreatePlayerRequest, v1.CreatePlayerResponse](
			httpClient,
			baseURL+PlayerSvcCreatePlayerProcedure,
			opts...,
		),
		movePlayer: connect_go.NewClient[v1.MovePlayerRequest, v1.MovePlayerResponse](
			httpClient,
			baseURL+PlayerSvcMovePlayerProcedure,
			opts...,
		),
		listPlayers: connect_go.NewClient[v1.ListPlayersRequest, v1.ListPlayersResponse](
			httpClient,
			baseURL+PlayerSvcListPlayersProcedure,
			opts...,
		),
		getPlayer: connect_go.NewClient[v1.GetPlayerRequest, v1.GetPlayerResponse](
			httpClient,
			baseURL+PlayerSvcGetPlayerProcedure,
			opts...,
		),
		setPlayer: connect_go.NewClient[v1.SetPlayerRequest, v1.SetPlayerResponse](
			httpClient,
			baseURL+PlayerSvcSetPlayerProcedure,
			opts...,
		),
		updatePlayer: connect_go.NewClient[v1.UpdatePlayerRequest, v1.UpdatePlayerResponse](
			httpClient,
			baseURL+PlayerSvcUpdatePlayerProcedure,
			opts...,
		),
	}
}

// playerSvcClient implements PlayerSvcClient.
type playerSvcClient struct {
	createPlayer *connect_go.Client[v1.CreatePlayerRequest, v1.CreatePlayerResponse]
	movePlayer   *connect_go.Client[v1.MovePlayerRequest, v1.MovePlayerResponse]
	listPlayers  *connect_go.Client[v1.ListPlayersRequest, v1.ListPlayersResponse]
	getPlayer    *connect_go.Client[v1.GetPlayerRequest, v1.GetPlayerResponse]
	setPlayer    *connect_go.Client[v1.SetPlayerRequest, v1.SetPlayerResponse]
	updatePlayer *connect_go.Client[v1.UpdatePlayerRequest, v1.UpdatePlayerResponse]
}

// CreatePlayer calls player.v1.PlayerSvc.CreatePlayer.
func (c *playerSvcClient) CreatePlayer(ctx context.Context, req *connect_go.Request[v1.CreatePlayerRequest]) (*connect_go.Response[v1.CreatePlayerResponse], error) {
	return c.createPlayer.CallUnary(ctx, req)
}

// MovePlayer calls player.v1.PlayerSvc.MovePlayer.
func (c *playerSvcClient) MovePlayer(ctx context.Context, req *connect_go.Request[v1.MovePlayerRequest]) (*connect_go.Response[v1.MovePlayerResponse], error) {
	return c.movePlayer.CallUnary(ctx, req)
}

// ListPlayers calls player.v1.PlayerSvc.ListPlayers.
func (c *playerSvcClient) ListPlayers(ctx context.Context, req *connect_go.Request[v1.ListPlayersRequest]) (*connect_go.Response[v1.ListPlayersResponse], error) {
	return c.listPlayers.CallUnary(ctx, req)
}

// GetPlayer calls player.v1.PlayerSvc.GetPlayer.
func (c *playerSvcClient) GetPlayer(ctx context.Context, req *connect_go.Request[v1.GetPlayerRequest]) (*connect_go.Response[v1.GetPlayerResponse], error) {
	return c.getPlayer.CallUnary(ctx, req)
}

// SetPlayer calls player.v1.PlayerSvc.SetPlayer.
func (c *playerSvcClient) SetPlayer(ctx context.Context, req *connect_go.Request[v1.SetPlayerRequest]) (*connect_go.Response[v1.SetPlayerResponse], error) {
	return c.setPlayer.CallUnary(ctx, req)
}

// UpdatePlayer calls player.v1.PlayerSvc.UpdatePlayer.
func (c *playerSvcClient) UpdatePlayer(ctx context.Context, req *connect_go.Request[v1.UpdatePlayerRequest]) (*connect_go.Response[v1.UpdatePlayerResponse], error) {
	return c.updatePlayer.CallUnary(ctx, req)
}

// PlayerSvcHandler is an implementation of the player.v1.PlayerSvc service.
type PlayerSvcHandler interface {
	CreatePlayer(context.Context, *connect_go.Request[v1.CreatePlayerRequest]) (*connect_go.Response[v1.CreatePlayerResponse], error)
	MovePlayer(context.Context, *connect_go.Request[v1.MovePlayerRequest]) (*connect_go.Response[v1.MovePlayerResponse], error)
	ListPlayers(context.Context, *connect_go.Request[v1.ListPlayersRequest]) (*connect_go.Response[v1.ListPlayersResponse], error)
	GetPlayer(context.Context, *connect_go.Request[v1.GetPlayerRequest]) (*connect_go.Response[v1.GetPlayerResponse], error)
	SetPlayer(context.Context, *connect_go.Request[v1.SetPlayerRequest]) (*connect_go.Response[v1.SetPlayerResponse], error)
	UpdatePlayer(context.Context, *connect_go.Request[v1.UpdatePlayerRequest]) (*connect_go.Response[v1.UpdatePlayerResponse], error)
}

// NewPlayerSvcHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlayerSvcHandler(svc PlayerSvcHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	playerSvcCreatePlayerHandler := connect_go.NewUnaryHandler(
		PlayerSvcCreatePlayerProcedure,
		svc.CreatePlayer,
		opts...,
	)
	playerSvcMovePlayerHandler := connect_go.NewUnaryHandler(
		PlayerSvcMovePlayerProcedure,
		svc.MovePlayer,
		opts...,
	)
	playerSvcListPlayersHandler := connect_go.NewUnaryHandler(
		PlayerSvcListPlayersProcedure,
		svc.ListPlayers,
		opts...,
	)
	playerSvcGetPlayerHandler := connect_go.NewUnaryHandler(
		PlayerSvcGetPlayerProcedure,
		svc.GetPlayer,
		opts...,
	)
	playerSvcSetPlayerHandler := connect_go.NewUnaryHandler(
		PlayerSvcSetPlayerProcedure,
		svc.SetPlayer,
		opts...,
	)
	playerSvcUpdatePlayerHandler := connect_go.NewUnaryHandler(
		PlayerSvcUpdatePlayerProcedure,
		svc.UpdatePlayer,
		opts...,
	)
	return "/player.v1.PlayerSvc/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlayerSvcCreatePlayerProcedure:
			playerSvcCreatePlayerHandler.ServeHTTP(w, r)
		case PlayerSvcMovePlayerProcedure:
			playerSvcMovePlayerHandler.ServeHTTP(w, r)
		case PlayerSvcListPlayersProcedure:
			playerSvcListPlayersHandler.ServeHTTP(w, r)
		case PlayerSvcGetPlayerProcedure:
			playerSvcGetPlayerHandler.ServeHTTP(w, r)
		case PlayerSvcSetPlayerProcedure:
			playerSvcSetPlayerHandler.ServeHTTP(w, r)
		case PlayerSvcUpdatePlayerProcedure:
			playerSvcUpdatePlayerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlayerSvcHandler returns CodeUnimplemented from all methods.
type UnimplementedPlayerSvcHandler struct{}

func (UnimplementedPlayerSvcHandler) CreatePlayer(context.Context, *connect_go.Request[v1.CreatePlayerRequest]) (*connect_go.Response[v1.CreatePlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("player.v1.PlayerSvc.CreatePlayer is not implemented"))
}

func (UnimplementedPlayerSvcHandler) MovePlayer(context.Context, *connect_go.Request[v1.MovePlayerRequest]) (*connect_go.Response[v1.MovePlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("player.v1.PlayerSvc.MovePlayer is not implemented"))
}

func (UnimplementedPlayerSvcHandler) ListPlayers(context.Context, *connect_go.Request[v1.ListPlayersRequest]) (*connect_go.Response[v1.ListPlayersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("player.v1.PlayerSvc.ListPlayers is not implemented"))
}

func (UnimplementedPlayerSvcHandler) GetPlayer(context.Context, *connect_go.Request[v1.GetPlayerRequest]) (*connect_go.Response[v1.GetPlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("player.v1.PlayerSvc.GetPlayer is not implemented"))
}

func (UnimplementedPlayerSvcHandler) SetPlayer(context.Context, *connect_go.Request[v1.SetPlayerRequest]) (*connect_go.Response[v1.SetPlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("player.v1.PlayerSvc.SetPlayer is not implemented"))
}

func (UnimplementedPlayerSvcHandler) UpdatePlayer(context.Context, *connect_go.Request[v1.UpdatePlayerRequest]) (*connect_go.Response[v1.UpdatePlayerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("player.v1.PlayerSvc.UpdatePlayer is not implemented"))
}
