syntax = "proto3";

option go_package = "pb/watermill";

service Game {
  rpc CreatePlayer(CreatePlayerRequest) returns (CreatePlayerResponse) {}
  rpc MovePlayer(MovePlayerRequest) returns (MovePlayerResponse) {}
  rpc GetLocation(GetLocationRequest) returns (GetLocationResponse) {}
  rpc ListPlayers(ListPlayersRequest) returns (ListPlayersResponse) {}
  rpc GetPlayer(GetPlayerRequest) returns (GetPlayerResponse) {} // Added GetPlayer method
  rpc SetPlayer(SetPlayerRequest) returns (SetPlayerResponse); // Added SetPlayer method
  rpc UpdatePlayer(UpdatePlayerRequest) returns (UpdatePlayerResponse) {} // Added UpdatePlayer method
  rpc GetRoomState(GetRoomStateRequest) returns (GetRoomStateResponse) {} // Added GetRoomState method
  rpc SocialLogin(SocialLoginRequest) returns (SocialLoginResponse) {}
  rpc LinkSocialAccount(LinkSocialAccountRequest) returns (LinkSocialAccountResponse) {}
  rpc UnlinkSocialAccount(UnlinkSocialAccountRequest) returns (UnlinkSocialAccountResponse) {}
  // New methods for handling commands and events
  rpc CreateGame(CreateGameCommand) returns (GameCreatedEvent);
  rpc StartGame(StartGameCommand) returns (GameStartedEvent);
  rpc EndGame(EndGameCommand) returns (GameEndedEvent);
}

message Room {
  string id = 1;
  string description = 2;
  repeated Item items = 3;
  repeated NPC npcs = 4;
  repeated Player players = 5;
  Coordinates coordinates = 6;
}

message Coordinates {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

message Player {
  string id = 1;
  string discord = 2;
  string name = 3;
  string race = 4;
  string class = 5;
  int32 level = 6;
  string alignment = 7;
  string background = 8;
  int32 strength = 9;
  int32 dexterity = 10;
  int32 constitution = 11;
  int32 intelligence = 12;
  int32 wisdom = 13;
  int32 charisma = 14;
  int32 hitPoints = 15;
  int32 temporaryHitPoints = 16;
  int32 maxHitPoints = 17;
  int32 armorClass = 18;
  int32 proficiencyBonus = 19;
  repeated Skill skills = 20;
  repeated SavingThrow savingThrows = 21;
  repeated Language languages = 22;
  repeated Equipment equipment = 23;
  repeated Feature features = 24;
  repeated Spell spells = 25;
  int32 spellSlots = 26;
  int32 currentSpellSlots = 27;
  int32 experiencePoints = 28;
  int32 initiative = 29;
  int32 speed = 30;
  string hitDice = 31;
  DeathSaves deathSaves = 32;
  repeated AbilityScoreBonus abilityScoreBonuses = 33;
  repeated SpecialAbility specialAbilities = 34;
  RacialTraits racialTraits = 35;
  Coordinates location = 36;
  Coordinates defaultRoom = 37; // New field
  string LastLogin = 38;
  string LastLogout = 39;
  Admin admin = 40;
  SocialProvider social_provider = 41;
  string social_id = 42;
  string social_token = 43;
}

enum SocialProvider {
  GOOGLE = 0;
  GITHUB = 1;
}

message Admin {
  bool isAdmin = 1;
}

message Skill {
  string name = 1;
}

message SavingThrow {
  string name = 1;
}

message Language {
  string name = 1;
}

message Equipment {
  string name = 1;
}

message Feature {
  string name = 1;
}

message Spell {
  string name = 1;
}

message SpecialAbility {
  string name = 1;
}

message AbilityScoreBonus {
  string name = 1;
  int32 value = 2;
}

message DeathSaves {
  int32 successes = 1;
  int32 failures = 2;
}

message RacialTraits {
  string name = 1;
  string description = 2;
  int32 darkvision = 3;
  string size = 4;
  int32 speed = 5;
  repeated Language languages = 6;
  int32 abilityScoreBonuses = 7;
  repeated SpecialAbility specialAbilities = 8;
}

message Location {
  string id = 1;
  string description = 2;
  repeated Item items = 3;
  repeated NPC npcs = 4;
}

message Item {
  string name = 1;
}

message NPC {
  string name = 1;
}

message GetRoomStateRequest { // Added message
  string room_id = 1;
}

message GetRoomStateResponse { // Added message
  RoomState room_state = 1;
}

message CreatePlayerRequest {
  string player_id = 1;
  Player player = 2;
}

message CreatePlayerResponse {
  Player player = 1;
}

message MovePlayerRequest {
  string player_id = 1;
  Coordinates new_location = 2;
}

message MovePlayerResponse {
  Player player = 1;
}

message GetLocationRequest {
  Coordinates coordinates = 1;
}

message GetLocationResponse {
  Location location = 1;
}

message ListPlayersRequest {}

message ListPlayersResponse {
  repeated Player players = 1;
}

message GetPlayerRequest {
  string playerId = 1; // Add the field to specify the player ID
}

message GetPlayerResponse {
  Player player = 1; // Add the field to return the player
}

message SetPlayerRequest {
  Player player = 1; // Add the field to specify the player
}

message SetPlayerResponse {
  Player player = 1; // Add the field to return the player
}

message UpdatePlayerRequest { // Added message
  string player_id = 1;
  Player player = 2;
}

message UpdatePlayerResponse { // Added message
  Player player = 1;
}

message RoomState {
  string id = 1;
  repeated Player players = 2;
  // Other fields...
}

message SocialLoginResponse {
  string player_id = 1;
  string token = 2;
}

message SocialLoginRequest {
  SocialProvider provider = 1;
  string social_id = 2;
  // etc
}

message UnlinkSocialAccountRequest {
  string player_id = 1;
  SocialProvider provider = 2;
}

message UnlinkSocialAccountResponse {
  string player_id = 1;
}

message LinkSocialAccountRequest {
  string player_id = 1;
  SocialProvider provider = 2;
  string social_id = 3;
  // etc
}

message LinkSocialAccountResponse {
  string player_id = 1;
}

// Command to create a new game
message CreateGameCommand {
  string game_id = 1;
  string player_id = 2;
}

// Event that a game was created
message GameCreatedEvent {
  string game_id = 1;
  string player_id = 2;
}

// Command to start a game
message StartGameCommand {
  string game_id = 1;
}

// Event that a game was started
message GameStartedEvent {
  string game_id = 1;
}

// Command to end a game
message EndGameCommand {
  string game_id = 1;
}

// Event that a game was ended
message GameEndedEvent {
  string game_id = 1;
}

// Command to move a player
message MovePlayerCommand {
  string game_id = 1;
  string player_id = 2;
  string direction = 3; // could be an enum depending on your game's rules
}

// Event that a player moved
message PlayerMovedEvent {
  string game_id = 1;
  string player_id = 2;
  string direction = 3; // could be an enum depending on your game's rules
}

